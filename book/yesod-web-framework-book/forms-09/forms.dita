<?xml version="1.0" encoding="UTF-8"?>
<html>
  <p id="x1" class="hascomments">I've mentioned the boundary issue already: whenever data enters or leaves an
   application, we need to validate it. Probably the most difficult place this occurs is forms.
   Coding forms is complex; in an ideal world, we'd like a solution that addresses the following
   problems:</p>
  <ul id="ul_fvy_beg_md">
   <li id="x2">Ensure data is valid.</li>
   <li id="x3">Marshal string data in the form submission to Haskell datatypes.</li>
   <li id="x4">Generate HTML code for displaying the form.</li>
   <li id="x5">Generate Javascript to do clientside validation and provide more user-friendly widgets, such
    as date pickers.</li>
   <li id="x6">Build up more complex forms by combining together simpler forms.</li>
   <li id="x7">Automatically assign names to our fields that are guaranteed to be unique.</li>
  </ul>
  <p id="x8" class="hascomments">The yesod-form package provides all these features in a simple, declarative
   API. It builds on top of Yesod's widgets to simplify styling of forms and applying Javascript
   appropriately. And like the rest of Yesod, it uses Haskell's type system to make sure everything
   is working correctly.</p>
   <pre id="x1">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/ RootR GET
/person PersonR POST
|]

instance Yesod Synopsis

-- Tells our application to use the standard English messages.
-- If you want i18n, then you can supply a translating function instead.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

-- And tell us where to find the jQuery libraries. We'll just use the defaults,
-- which point to the Google CDN.
instance YesodJquery Synopsis

-- The datatype we wish to receive from the form
data Person = Person
    { personName :: Text
    , personBirthday :: Day
    , personFavoriteColor :: Maybe Text
    , personEmail :: Text
    , personWebsite :: Maybe Text
    }
  deriving Show

-- Declare the form. The type signature is a bit intimidating, but here's the
-- overview:
--
-- * The Html parameter is used for encoding some extra information. See the
-- discussion regarding runFormGet and runFormPost below for further
-- explanation.
--
-- * We have the sub and master site types, as usual.
--
-- * FormResult can be in three states: FormMissing (no data available),
-- FormFailure (invalid data) and FormSuccess
--
-- * The Widget is the viewable form to place into the web page.
--
-- Note that the scaffolded site provides a convenient Form type synonym,
-- so that our signature could be written as:
--
-- &gt; personForm :: Form Person
--
-- For our purposes, it's good to see the long version.
personForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Person, Widget)
personForm = renderDivs $ Person
    &lt;$&gt; areq textField "Name" Nothing
    &lt;*&gt; areq (jqueryDayField def
        { jdsChangeYear = True -- give a year dropdown
        , jdsYearRange = "1900:-5" -- 1900 till five years ago
        }) "Birthday" Nothing
    &lt;*&gt; aopt textField "Favorite color" Nothing
    &lt;*&gt; areq emailField "Email address" Nothing
    &lt;*&gt; aopt urlField "Website" Nothing

-- The GET handler displays the form
getRootR :: Handler RepHtml
getRootR = do
    -- Generate the form to be displayed
    ((_, widget), enctype) &lt;- generateFormPost personForm
    defaultLayout [whamlet|
&lt;p&gt;The widget generated contains only the contents of the form, not the form tag itself. So...
&lt;form method=post action=@{PersonR} enctype=#{enctype}&gt;
    ^{widget}
    &lt;p&gt;It also doesn't include the submit button.
    &lt;input type=submit&gt;
|]

-- The POST handler processes the form. If it is successful, it displays the
-- parsed person. Otherwise, it displays the form again with error messages.
postPersonR :: Handler RepHtml
postPersonR = do
    ((result, widget), enctype) &lt;- runFormPost personForm
    case result of
        FormSuccess person -&gt; defaultLayout [whamlet|&lt;p&gt;#{show person}|]
        _ -&gt; defaultLayout [whamlet|
&lt;p&gt;Invalid input, let's try again.
&lt;form method=post action=@{PersonR} enctype=#{enctype}&gt;
    ^{widget}
    &lt;input type=submit&gt;
|]

main :: IO ()
main = warpDebug 3000 Synopsis</pre>
 
  <p id="x1" class="hascomments">Before jumping into the types themselves, we should begin with an overview of the different
   kinds of forms. There are three categories:</p>
  <dl id="x2">
   
    <dt id="x4">Applicative</dt>
    <dd id="x5">These are the most commonly used (it's what appeared in the synopsis). Applicative
     gives us some nice properties of letting error messages coallesce together and keep a very
     high-level, declarative approach. (For more information on applicative code, see <a href="http://www.haskell.org/haskellwiki/Applicative_functor">the Haskell wiki</a>.)</dd>
   
   
    <dt id="x7">Monadic</dt>
    <dd id="x8">A more powerful alternative to applicative. While this allows you more flexibility,
     it does so at the cost of being more verbose. Useful if you want to create forms that don't fit
     into the standard two-column look.</dd>
   
   
    <dt id="x10">Input</dt>
    <dd id="x11">Used only for receiving input. Does not generate any HTML for receiving the user input.
     Useful for interacting with existing forms.</dd>
   
  </dl>
  <p id="x12" class="hascomments">In addition, there are a number of different variables that come into play for each form and
   field you will want to set up:</p>
  <ul id="ul_ibl_vig_md">
   <li id="x13">Is the field required or optional?</li>
   <li id="x14">Should it be submitted with GET or POST?</li>
   <li id="x15">Does it have a default value, or not?</li>
  </ul>
  <p id="x16" class="hascomments">An overriding goal is to minimize the number of field definitions and let them work in
   as many contexts as possible. One result of this is that we end up with a few extra words for
   each field. In the synopsis, you may have noticed things like areq and that
   extra Nothing parameter. We'll cover why all of those exist in the course of
   this chapter, but for now realize that by making these parameters explicit, we are able to reuse
   the individuals fields (like yesod-form:Yesod.Form.Fields:intField)
   in many different ways.</p>
  <p id="x-5" class="hascomments">A quick note on naming conventions. Each form type has a one-letter prefix (A, M and I) which
   is used in a few places, such as saying MForm. We also use req and opt to mean required and
   optional. Combining these, we create a required applicative field with areq, or
   an optional input field with iopt.</p>
 
  <p id="x1" class="hascomments">The yesod-form:Yesod.Form.Types module declares a few types. Let's start off
   with some simple helpers:</p>
  <dl id="x3">
   
    <dt id="x5">Enctype</dt>
    <dd id="x6">The encoding type, either UrlEncoded or Multipart.
     This datatype declares an instance of ToHtml, so you can use the enctype
     directly in Hamlet.</dd>
   
   
    <dt id="x8">Env</dt>
    <dd id="x9">Maps a parameter name to a list of values.</dd>
   
   
    <dt id="x11">FileEnv</dt>
    <dd id="x12">Maps a parameter name to the associated uploaded file.</dd>
   
   
    <dt id="x14">Ints</dt>
    <dd id="x15">As mentioned in the introduction, yesod-form automatically assigns
     a unique name to each field. Ints is used to keep track of the next number to
     assign.</dd>
   
   
    <dt id="x17">FormResult</dt>
    <dd id="x18">Has one of three possible states: FormMissing if no data was
     submitted, FormFailure if there was an error parsing the form (e.g., missing a
     required field, invalid content), or FormSuccess if everything went
     smoothly.</dd>
   
  </dl>
  <p id="x19" class="hascomments">Next we have three datatypes used for defining individual fields.</p>
  <aside id="x20" class="note">A field is a single piece of information, such as a number, a string or an email address.
   Fields are combined together to build forms.</aside>
  <dl id="x21">
   
    <dt id="x23">Field</dt>
    <dd id="x24">Defines two pieces of functionality: how to parse the text input from a user into a
     Haskell value, and how to create the widget to be displayed to the user.
      yesod-form defines a number of individual Fields in yesod-form:Yesod.Form.Fields.</dd>
   
   
    <dt id="x27">FieldSettings</dt>
    <dd id="x28">Basic information on how a field should be displayed, such as the display name, an
     optional tooltip, and possibly hardcoded id and name
     attributes. (If none are provided, they are automatically generated.)<aside id="x29" class="note">FieldSettings provides an IsString instance, so when you
      need to provide a FieldSettings value, you can actually type in a literal
      string. That's how we interacted with it in the synopsis.</aside></dd>
   
   
    <dt id="x31">FieldView</dt>
    <dd id="x32">An intermediate format containing a bunch of view information on a field. This is hardly
     ever used directly by the user, we'll see more details later.</dd>
   
  </dl>
  <p id="x33" class="hascomments">And finally, we get to the important stuff: the forms themselves. There are three
   types for this: MForm is for monadic forms, AForm for
   applicative and IForm (declared in yesod-form:Yesod.Form.Input:IForm) for input. MForm is actually a
   type synonym for a monad stack that provides the following features:</p>
  <ul id="ul_cju_elg_md">
   <li id="x35">A Reader monad giving us the parameters (Env and
     FileEnv), the master site argument and the list of languages the user
    supports. The last two are used for i18n (more on this later).</li>
   <li id="x36">A Writer monad keeping track of the Enctype. A
    form will always be UrlEncoded, unless there is a file input field, which will
    force us to use multipart instead.</li>
   <li id="x37">A State monad holding an Ints to keep track of the
    next unique name to produce.</li>
  </ul>
  <p id="x38" class="hascomments">An AForm is pretty similar. However, there are a few major
   differences:</p>
  <ul id="ul_atf_olg_md">
   <li id="x39">It produces a list of FieldViews. This allows us to keep an
    abstract idea of the form display, and then at the end of the day choose an appropriate function
    for laying it out on the page. In the synopsis, we used renderDivs, which
    creates a bunch of div tags. Another option would be renderTable.</li>
   <li id="x40">It does not provide a Monad instance. The goal of
     Applicative is to allow the entire form to run, grab as much information on
    each field as possible, and then create the final result. This cannot work in the context of
     Monad.</li>
  </ul>
  <p id="x41" class="hascomments">An IForm is even simpler: it returns either a list of error messages
   or a result.</p>
 
  <p id="x1" class="hascomments">"But wait a minute," you say. "You said the synopsis uses applicative forms, but I'm
   sure the type signature said MForm. Shouldn't it be Monadic?" That's true, the
   final form we produced was monadic. But what really happened is that we converted an applicative
   form to a monadic one.</p>
  <p id="x2" class="hascomments">Again, our goal is to reuse code as much as possible, and minimize the number of
   functions in the API. And Monadic forms are more powerful than Applicative, if more clumsy, so
   anything that can be expressed in an Applicative form could also be expressed in a Monadic form.
   There are two core functions that help out with this: aformToForm converts any
   applicative form to a monadic one, and formToAForm converts certain kinds of
   monadic forms to applicative forms.</p>
  <p id="x3" class="hascomments">"But wait another minute," you insist. "I didn't see any
    aformToForm!" Also true. The renderDivs function takes care of
   that for us.</p>
 
  <p id="x1" class="hascomments">Now that I've (hopefully) convinced you that in our synopsis we were really dealing with
   applicative forms, let's have a look and try to understand how these things get created. Let's
   take a simple example:</p>
  <pre id="x2">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

-- START
data Car = Car
    { carModel :: Text
    , carYear :: Int
    }
  deriving Show

carAForm :: AForm Synopsis Synopsis Car
carAForm = Car
    &lt;$&gt; areq textField "Model" Nothing
    &lt;*&gt; areq intField "Year" Nothing

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable carAForm
-- STOP

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  <p id="x3" class="hascomments">Here, we've explicitly split up applicative and monadic forms. In carAForm, we use the &lt;$&gt; and &lt;*&gt; operators. This should not be surprising; these are
            almost always used in applicative-style code. And we have one line for each record in
            our Car datatype. Perhaps unsurprisingly, we have a textField for the Text record, and an
                intField for the Int
            record.</p>
  <p id="x5" class="hascomments">Let's look a bit more closely at the areq function. Its (simplified)
            type signature is Field a -&gt; FieldSettings -&gt; Maybe a -&gt; AForm
                a. So that first argument is going to determine the datatype of this field,
            how to parse it, and how to render it. The next argument,
            FieldSettings, tells us the label, tooltip, name and ID of the field.
            In this case, we're using the previously-mentioned IsString instance of
                FieldSettings.</p>
  <p id="x7" class="hascomments">And what's up with that Maybe a? It provides the optional default
            value. For example, if we want our form to fill in "2007" as the default car year, we
            would use areq intField "Year" (Just 2007). We can even take
            this to the next level, and have a form that takes an optional parameter giving the
            default values.</p>
  <figure id="x9"><figcaption>Form with default values</figcaption>
   
   <pre id="x11">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

data Car = Car
    { carModel :: Text
    , carYear :: Int
    }
  deriving Show

-- START
carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq intField "Year" (carYear &lt;$&gt; mcar)
-- STOP

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable (carAForm $ Just $ Car "Forte" 2010)

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  </figure>
   <p id="x1" class="hascomments">Suppose we wanted to have an optional field (like the car color). All we do instead is
            use the aopt function.</p>
  <figure id="x2"><figcaption>Optional fields</figcaption>
   
   <pre id="x4">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

-- START
data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Text
    }
  deriving Show

carAForm :: AForm Synopsis Synopsis Car
carAForm = Car
    &lt;$&gt; areq textField "Model" Nothing
    &lt;*&gt; areq intField "Year" Nothing
    &lt;*&gt; aopt textField "Color" Nothing
-- STOP

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable carAForm

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  </figure>
  <p id="x5" class="hascomments">And like required fields, the last argument is the optional default value. However,
            this has two layers of Maybe wrapping. This may seem redundant (and it is), but it makes
            it much easier to write code that takes an optional default form parameter, such as in
            the next example.</p>
  <figure id="x6"><figcaption>Default optional fields</figcaption>
   
   <pre id="x8">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

-- START
data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Text
    }
  deriving Show

carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq intField  "Year"  (carYear  &lt;$&gt; mcar)
    &lt;*&gt; aopt textField "Color" (carColor &lt;$&gt; mcar)

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just "gray"
-- STOP

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  </figure>
 
  <p id="x1" class="hascomments">How would we make our form only accept cars created after 1990? If you remember, we
            said above that the Field itself contained the information on what is a
            valid entry. So all we need to do is write a new Field, right? Well,
            that would be a bit tedious. Instead, let's just modify an existing one:</p>
  <pre id="x2">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Text
    }
  deriving Show

-- START
carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField    "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField "Year"  (carYear  &lt;$&gt; mcar)
    &lt;*&gt; aopt textField    "Color" (carColor &lt;$&gt; mcar)
  where
    errorMessage :: Text
    errorMessage = "Your car is too old, get a new one!"

    carYearField = check validateYear intField

    validateYear y
        | y &lt; 1990 = Left errorMessage
        | otherwise = Right y
-- STOP

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just "gray"

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  <p id="x3" class="hascomments">The trick here is the check function. It takes a function
                (validateYear) that returns either an error message or a modified
            field value. In this example, we haven't modified the value at all. That is usually
            going to be the case. This kind of checking is very common, so we have a shortcut:</p>
  <pre id="x4">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Text
    }
  deriving Show

carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField "Year" (carYear &lt;$&gt; mcar)
    &lt;*&gt; aopt textField "Color" (carColor &lt;$&gt; mcar)
  where
    errorMessage :: Text
    errorMessage = "Your car is too old, get a new one!"

-- START
    carYearField = checkBool (&gt;= 1990) errorMessage intField
-- STOP

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just "gray"

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  <p id="x5" class="hascomments">checkBool takes two parameters: a condition that must be fulfilled,
            and an error message to be displayed if it was not.</p>
  <aside id="x6" class="note">You may have noticed the explicit Text type signature on
                errorMessage. In the presence of
            OverloadedStrings, this is necessary. In order to support i18n,
            messages can have many different datatypes, and GHC has no way of determining which
            instance of IsString you intended to use.</aside>
  <p id="x7" class="hascomments">It's great to make sure the car isn't too old. But what if we want to make sure that
            the year specified is not from the future? In order to look up the current year, we'll
            need to run some IO. For such circumstances, we'll need
                checkM:</p>
  <pre id="x8">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day, getCurrentTime, utctDay, toGregorian)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Text
    }
  deriving Show

carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField "Year" (carYear &lt;$&gt; mcar)
    &lt;*&gt; aopt textField "Color" (carColor &lt;$&gt; mcar)
  where
    errorMessage :: Text
    errorMessage = "Your car is too old, get a new one!"

-- START
    carYearField = checkM inPast $ checkBool (&gt;= 1990) errorMessage intField

    inPast y = do
        thisYear &lt;- liftIO getCurrentYear
        return $ if y &lt;= thisYear
            then Right y
            else Left ("You have a time machine!" :: Text)

getCurrentYear :: IO Int
getCurrentYear = do
    now &lt;- getCurrentTime
    let today = utctDay now
    let (year, _, _) = toGregorian today
    return $ fromInteger year
-- STOP

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just "gray"

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  <p id="x9" class="hascomments">inPast is a function that will return an Either
            result. However, it uses a Handler monad. We use liftIO getCurrentYear to get the current year and then compare it against
            the user-supplied year. Also, notice how we can chain together multiple validators.</p>
  <aside id="x11" class="note">Since the checkM validator runs in the Handler
            monad, it has access to a lot of the stuff you can normally do in Yesod. This is
            especially useful for running database actions, which we'll cover in the <a href="../../yesod-web-framework-book/persistent-060/persistent.dita#file136-persistentpersistent" id="x-19">Persistent
                chapter</a>.</aside>
 
  <p id="x1" class="hascomments">Our color entry field is nice, but it's not exactly user-friendly. What we really want is a
   dropdown list.</p>
  <figure id="x2"><figcaption>Drop-down lists</figcaption>
   
   <pre id="x4">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day, getCurrentTime, utctDay, toGregorian)
import Data.Text (Text)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

-- START
data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Color
    }
  deriving Show

data Color = Red | Blue | Gray | Black
    deriving (Show, Eq, Enum, Bounded)

carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField "Year" (carYear &lt;$&gt; mcar)
    &lt;*&gt; aopt (selectFieldList colors) "Color" (carColor &lt;$&gt; mcar)
  where
    colors :: [(Text, Color)]
    colors = [("Red", Red), ("Blue", Blue), ("Gray", Gray), ("Black", Black)]
-- STOP
    errorMessage :: Text
    errorMessage = "Your car is too old, get a new one!"

    carYearField = checkM inPast $ checkBool (&gt;= 1990) errorMessage intField

    inPast y = do
        thisYear &lt;- liftIO getCurrentYear
        return $ if y &lt;= thisYear
            then Right y
            else Left ("You have a time machine!" :: Text)

getCurrentYear :: IO Int
getCurrentYear = do
    now &lt;- getCurrentTime
    let today = utctDay now
    let (year, _, _) = toGregorian today
    return $ fromInteger year

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just Black

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  </figure>
  <p id="x5" class="hascomments">selectFieldList takes a list of pairs. The first item in the pair is
            the text displayed to the user in the drop-down list, and the second item is the actual
            Haskell value. Of course, the code above looks really repetitive; we can get the same
            result using the Enum and Bounded instance GHC automatically derives for us.</p>
  <figure id="x6"><figcaption>Uses Enum and Bounded</figcaption>
   
   <pre id="x8">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day, getCurrentTime, utctDay, toGregorian)
import Data.Text (Text, pack)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
import Control.Arrow ((&amp;&amp;&amp;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

-- START
data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Color
    }
  deriving Show

data Color = Red | Blue | Gray | Black
    deriving (Show, Eq, Enum, Bounded)

carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField "Year" (carYear &lt;$&gt; mcar)
    &lt;*&gt; aopt (selectFieldList colors) "Color" (carColor &lt;$&gt; mcar)
  where
    colors = map (pack . show &amp;&amp;&amp; id) $ [minBound..maxBound]
-- STOP
    errorMessage :: Text
    errorMessage = "Your car is too old, get a new one!"

    carYearField = checkM inPast $ checkBool (&gt;= 1990) errorMessage intField

    inPast y = do
        thisYear &lt;- liftIO getCurrentYear
        return $ if y &lt;= thisYear
            then Right y
            else Left ("You have a time machine!" :: Text)

getCurrentYear :: IO Int
getCurrentYear = do
    now &lt;- getCurrentTime
    let today = utctDay now
    let (year, _, _) = toGregorian today
    return $ fromInteger year

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just Black

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  </figure>
  <p id="x9" class="hascomments">[minBound..maxBound] gives us a list of all the different
                Color values. We then apply a map and
                &amp;&amp;&amp; (a.k.a, the fan-out operator) to turn that into a
            list of pairs.</p>
  <p id="x10" class="hascomments">Some people prefer radio buttons to drop-down lists. Fortunately, this is just a
            one-word change.</p>
  <figure id="x11"><figcaption>Radio buttons</figcaption>
   
   <pre id="x13">{-# LANGUAGE QuasiQuotes, TemplateHaskell, MultiParamTypeClasses,
    OverloadedStrings, TypeFamilies #-}
import Yesod
import Yesod.Form.Jquery
import Data.Time (Day, getCurrentTime, utctDay, toGregorian)
import Data.Text (Text, pack)
import Control.Applicative ((&lt;$&gt;), (&lt;*&gt;))
import Control.Arrow ((&amp;&amp;&amp;))

data Synopsis = Synopsis

mkYesod "Synopsis" [parseRoutes|
/car CarR GET
|]

instance Yesod Synopsis

-- Necessary for i18n. The default function uses English.
instance RenderMessage Synopsis FormMessage where
    renderMessage _ _ = defaultFormMessage

main :: IO ()
main = warpDebug 3000 Synopsis

-- START
data Car = Car
    { carModel :: Text
    , carYear :: Int
    , carColor :: Maybe Color
    }
  deriving Show

data Color = Red | Blue | Gray | Black
    deriving (Show, Eq, Enum, Bounded)

carAForm :: Maybe Car -&gt; AForm Synopsis Synopsis Car
carAForm mcar = Car
    &lt;$&gt; areq textField "Model" (carModel &lt;$&gt; mcar)
    &lt;*&gt; areq carYearField "Year" (carYear &lt;$&gt; mcar)
    &lt;*&gt; aopt (radioFieldList colors) "Color" (carColor &lt;$&gt; mcar)
  where
    colors = map (pack . show &amp;&amp;&amp; id) $ [minBound..maxBound]
-- STOP
    errorMessage :: Text
    errorMessage = "Your car is too old, get a new one!"

    carYearField = checkM inPast $ checkBool (&gt;= 1990) errorMessage intField

    inPast y = do
        thisYear &lt;- liftIO getCurrentYear
        return $ if y &lt;= thisYear
            then Right y
            else Left ("You have a time machine!" :: Text)

getCurrentYear :: IO Int
getCurrentYear = do
    now &lt;- getCurrentTime
    let today = utctDay now
    let (year, _, _) = toGregorian today
    return $ fromInteger year

carForm :: Html -&gt; MForm Synopsis Synopsis (FormResult Car, Widget)
carForm = renderTable $ carAForm $ Just $ Car "Forte" 2010 $ Just Black

getCarR :: Handler RepHtml
getCarR = do
    ((result, widget), enctype) &lt;- runFormGet carForm
    case result of
        FormSuccess car -&gt; defaultLayout [whamlet|&lt;p&gt;#{show car}|]
        _ -&gt; defaultLayout [whamlet|
&lt;form method=get action=@{CarR} enctype=#{enctype}&gt;
    &lt;table&gt;
        ^{widget}
    &lt;input type=submit&gt;
|]</pre>
  </figure>
 
  <p id="x1" class="hascomments">At some point, we're going to need to take our beautiful forms and produce some results. There
   are a number of different functions available for this, each with its own purpose. I'll go
   through them, starting with the most common.</p>
  <dl id="x2">
   
    <dt id="x4">runFormPost</dt>
    <dd id="x5">This will run your form against any submitted POST parameter. If
     this is not a POST submission, it will return a FormMissing.
     This automatically inserts a security token as a hidden form field to avoid <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" id="x6">CSRF</a> attacks.</dd>
   
   
    <dt id="x8">runFormGet</dt>
    <dd id="x9">Same as runFormPost, for GET submissions. In order to distinguish a
     normal GET page load from a GET submission, it includes an
     extra _hasdata hidden field in the form.</dd>
   
   
    <dt id="x11">runFormPostNoNonce</dt>
    <dd id="x12">Same as runFormPost, but does not include (or require) the CSRF
     security token.</dd>
   
   
    <dt id="x14">generateFormPost</dt>
    <dd id="x15">Instead of binding to existing POST parameters, acts as if there
     are none. This can be useful when you want to generate a new form after a previous form was
     submitted, such as in a wizard.</dd>
   
   
    <dt id="x17">generateFormGet</dt>
    <dd id="x18">Same as generateFormPost, but for GET.</dd>
   
  </dl>
  <p id="x19" class="hascomments">The return type from the first three is ((FormResult a, Widget),
    Enctype). The Widget will already have any validation errors and
   previously submitted values.</p>
 
  <p id="x1" class="hascomments">There have been a few references to i18n in this chapter. The topic will get more
   thorough coverage in <a href="../../yesod-web-framework-book/internationalization/internationalization.dita#file186-internationalizationinternationalization" id="x-3">its
    own chapter</a>, but since it has such a profound effect on yesod-form, I
   wanted to give a brief overview. The idea behind i18n in Yesod is to have data types represent
   messages. Each site can have an instance of RenderMessage for a given datatype
   which will translate that message based on a list of languages the user accepts. As a result of
   all this, there are a few things you should be aware of:</p>
  <ul id="ul_pgx_iyg_md">
   <li id="x2">There is an automatic instance of RenderMessage for
     Text in every site, so you can just use plain strings if you don't care about
    i18n support. However, you may need to use explicit type signatures occassionally.</li>
   <li id="x3">yesod-form expresses all of its messages in terms of the
     FormMessage datatype. Therefore, to use yesod-form, you'll
    need to have an appropriate RenderMessage instance. A simple one that uses the
    default English translations would
    be:<pre id="x4">instance RenderMessage MyApp FormMessage where
    renderMessage _ _ = defaultFormMessage</pre>This
    is provided automatically by the scaffolded site.</li>
   <li id="x5">In order to allow multiple different message types to co-exist, we use an existential
    type called SomeMessage. You will occassionally need to wrap your values inside
    of it, though this is not common in normal library use.</li>
  </ul>
 
        <p id="x-3" class="hascomments">Often times, a simple form layout is adequate, and applicative forms excel at
            this approach. Sometimes, however, you'll want to have a more customized look to your
            form.</p>
        <figure id="x-4"><figcaption>A non-standard form layout</figcaption>
            
            <img src="../../images/monadic-form.png" id="image_d604c9d5-b1e2-447a-a3ee-efe4559f0d2f" placement="inline"/>
        </figure>
        <p id="x-6" class="hascomments">For these use cases, monadic forms fit the bill. They are a bit more verbose
            than their applicative cousins, but this verbosity allows you to have complete control
            over what the form will look like. In order to generate the form above, we could code
            something like this.</p>
        <pre id="x-7">{-# LANGUAGE OverloadedStrings, TypeFamilies, QuasiQuotes,
             TemplateHaskell, MultiParamTypeClasses #-}
import Yesod
import Control.Applicative
import Data.Text (Text)

data Monadic = Monadic

mkYesod "Monadic" [parseRoutes|
/ RootR GET
|]

instance Yesod Monadic

instance RenderMessage Monadic FormMessage where
    renderMessage _ _ = defaultFormMessage

data Person = Person { personName :: Text, personAge :: Int }
    deriving Show

personForm :: Html -&gt; MForm Monadic Monadic (FormResult Person, Widget)
personForm extra = do
    (nameRes, nameView) &lt;- mreq textField "this is not used" Nothing
    (ageRes, ageView) &lt;- mreq intField "neither is this" Nothing
    let personRes = Person &lt;$&gt; nameRes &lt;*&gt; ageRes
    let widget = do
            toWidget [lucius|
##{fvId ageView} {
    width: 3em;
}
|]
            [whamlet|
#{extra}
&lt;p&gt;
    Hello, my name is #
    ^{fvInput nameView}
    \ and I am #
    ^{fvInput ageView}
    \ years old. #
    &lt;input type=submit value="Introduce myself"&gt;
|]
    return (personRes, widget)

getRootR :: Handler RepHtml
getRootR = do
    ((res, widget), enctype) &lt;- runFormGet personForm
    defaultLayout [whamlet|
&lt;p&gt;Result: #{show res}
&lt;form enctype=#{enctype}&gt;
    ^{widget}
|]

main :: IO ()
main = warpDebug 3000 Monadic</pre>
        <p id="x-8" class="hascomments">Similar to the applicative areq, we use mreq for monadic forms. (And yes, there's also
                mopt for optional fields.) But there's a big difference:
                mreq gives us back a pair of values. Instead of hiding away the
                yesod-form:Yesod.Form.Types:FieldView value and
            automatically inserting it into a widget, we get the control to insert it as we see
            fit.</p>
        <p id="x-12" class="hascomments">FieldView has a number of pieces of information. The most
            important is fvInput, which is the actual form field. In this example,
            we also use fvId, which gives us back the HTML id
            attribute of the input tag. In our example, we use that to specify the width of the
            field.</p>
        <p id="x-13" class="hascomments">You might be wondering what the story is with the "this is not used" and
            "neither is this" values. mreq takes a FieldSettings as its second argument. Since FieldSettings
            provides an IsString instance, the strings are essentially expanded by
            the compiler
            to:<pre>fromString "this is not used" == FieldSettings
    { fsLabel = "this is not used"
    , fsTooltip = Nothing
    , fsId = Nothing
    , fsName = Nothing
    , fsClass = []
    }</pre>In
            the case of applicative forms, the fsLabel and
                fsTooltip values are used when constructing your HTML. In the case
            of monadic forms, Yesod does not generate any of the "wrapper" HTML for you, and
            therefore these values are ignored.</p>
        <p id="x-14" class="hascomments">The other interesting bit is the extra value.
                GET forms include an extra field to indicate that they have been
            submitted, and POST forms include a security tokens to prevent CSRF
            attacks. If you don't include this extra hidden field in your form, Yesod will not
            accept it.</p>
        <p id="x-16" class="hascomments">Other than that, things are pretty straight-forward. We create our
                personRes value by combining together the nameRes
            and ageRes values, and then return a tuple of the person and the
            widget. And in the getRootR function, everything looks just like an
            applicative form. In fact, you could swap out our monadic form with an applicative one
            and the code would still work.</p>
        <aside id="x-17" class="note">Well, that's not exactly true. It would compile and build,
            but you wouldn't have a submit button.</aside>
    
  <p id="x-3" class="hascomments">Applicative and monadic forms handle both the generation of your HTML code and the parsing of
   user input. Sometimes, you only want to do the latter, such as when there's an already-existing
   form in HTML somewhere, or if you want to generate a form dynamically using Javascript. In such a
   case, you'll want input forms.</p>
  <p id="x-4" class="hascomments">These work mostly the same as applicative and monadic forms, with some differences:</p>
  <ul id="ul_e3c4dff2-c3cd-4ba1-b146-3841e6018b14">
   <li id="x-5">You use runInputPost and runInputGet.</li>
   <li id="x-6">You use ireq and iopt. These functions now only
    take two arguments: the field type and the name (i.e., HTML name attribute) of
    the field in question.</li>
   <li id="x-7">After running a form, it returns the value. It doesn't return a widget or an
                encoding type.</li>
   <li id="x-8">If there are any validation errors, the page returns an "invalid arguments" error page.</li>
  </ul>
  <p id="x-9" class="hascomments">You can use input forms to recreate the previous example. Note, however, that the
   input version is less user friendly. If you make a mistake in an applicative or monadic form, you
   will be brought back to the same page, with your previously entered values in the form, and an
   error message explaning what you need to correct. With input forms, the user simply gets an error
   message.</p>
  <pre id="x-10">{-# LANGUAGE OverloadedStrings, TypeFamilies, QuasiQuotes,
             TemplateHaskell, MultiParamTypeClasses #-}
import Yesod
import Control.Applicative
import Data.Text (Text)

data Input = Input

mkYesod "Input" [parseRoutes|
/ RootR GET
/input InputR GET
|]

instance Yesod Input

instance RenderMessage Input FormMessage where
    renderMessage _ _ = defaultFormMessage

data Person = Person { personName :: Text, personAge :: Int }
    deriving Show

getRootR :: Handler RepHtml
getRootR = defaultLayout [whamlet|
&lt;form action=@{InputR}&gt;
    &lt;p&gt;
        My name is #
        &lt;input type=text name=name&gt;
        \ and I am #
        &lt;input type=text name=age&gt;
        \ years old. #
        &lt;input type=submit value="Introduce myself"&gt;
|]

getInputR :: Handler RepHtml
getInputR = do
    person &lt;- runInputGet $ Person
                &lt;$&gt; ireq textField "name"
                &lt;*&gt; ireq intField "age"
    defaultLayout [whamlet|&lt;p&gt;#{show person}|]

main :: IO ()
main = warpDebug 3000 Input</pre>
 
  <p id="x-3" class="hascomments">The fields that come built-in with Yesod will likely cover the vast majority of your
   form needs. But occassionally, you'll need something more specialized. Fortunately, you can
   create new forms in Yesod yourself. The Field datatype has two records:
    fieldParse takes a list of values submitted by the user and returns one of
   three results:</p>
  <ul id="ul_d7bb7211-f4dc-4239-a2b0-ae26a58b6290">
   <li id="x-4">An error message saying validation failed.</li>
   <li id="x-5">The parsed value.</li>
   <li id="x-6">Nothing, indicating that no data was supplied.</li>
  </ul>
  <p id="x-7" class="hascomments">That last case might sound surprising: shouldn't Yesod automatically know that no information
   is supplied when the input list is empty? Well, no actually. Checkboxes, for instance, indicate
   an unchecked state by sending in an empty list.</p>
  <p id="x-8" class="hascomments">Also, what's up with the list? Shouldn't it be a Maybe? Well, that's
   also not the case. With grouped checkboxes and multi-select lists, you'll have multiple widgets
   with the same name. We also use this trick in our example below.</p>
  <p id="x-9" class="hascomments">The second record is fieldView, and it renders a widget to display to
   the user. This function has four arguments: the id attribute, the
    name attribute, the result and a Bool indicating if the field
   is required.</p>
  <p id="x-10" class="hascomments">What did I mean by result? It's actually an Either, giving either
   the unparsed input (when parsing failed) or the successfully parsed value.
    intField is a great example of how this works. If you type in 42, the value of result will be Right 42. But
   if you type in turtle, the result will be Left
    "turtle". This lets you put in a value attribute on your input tag that will give the
   user a consistent experience.</p>
  <p id="x-15" class="hascomments">As a small example, we'll create a new field type that is a password confirm field.
            This field has two text inputs- both with the same name attribute- and returns an error
            message if the values don't match. Note that, unlike most fields, it does not provide a value attribute on the input tags, as you don't want to send back
            a user-entered password in your HTML ever.</p>
  <pre id="x-18">{-# LANGUAGE OverloadedStrings, TypeFamilies, QuasiQuotes,
             TemplateHaskell, MultiParamTypeClasses #-}
import Yesod
import Control.Applicative
import Data.Text (Text)

data Password = Password

mkYesod "Password" [parseRoutes|
/ RootR GET
|]

instance Yesod Password

instance RenderMessage Password FormMessage where
    renderMessage _ _ = defaultFormMessage
-- START
passwordConfirmField :: Field sub master Text
passwordConfirmField = Field
    { fieldParse = \rawVals -&gt;
        case rawVals of
            [a, b]
                | a == b -&gt; return $ Right $ Just a
                | otherwise -&gt; return $ Left "Passwords don't match"
            [] -&gt; return $ Right Nothing
            _ -&gt; return $ Left "You must enter two values"
    , fieldView = \idAttr nameAttr _ eResult isReq -&gt; [whamlet|
&lt;input id=#{idAttr} name=#{nameAttr} type=password&gt;
&lt;div&gt;Confirm:
&lt;input id=#{idAttr}-confirm name=#{nameAttr} type=password&gt;
|]
    }

getRootR :: Handler RepHtml
getRootR = do
    ((res, widget), enctype) &lt;- runFormGet $ renderDivs
        $ areq passwordConfirmField "Password" Nothing
    defaultLayout [whamlet|
&lt;p&gt;Result: #{show res}
&lt;form enctype=#{enctype}&gt;
    ^{widget}
    &lt;input type=submit value="Change password"&gt;
|]
-- STOP
main :: IO ()
main = warpDebug 3000 Password</pre>
 
  <p id="x-3" class="hascomments">Forms in Yesod are broken up into three groups. Applicative is the most common, as it provides
   a nice user interface with an easy-to-use API. Monadic forms give you more power, but are harder
   to use. Input forms are intended when you just want to read data from the user, not generate the
   input widgets.</p>
  <p id="x-4" class="hascomments">There are a number of different Fields provided by Yesod out-of-the-box. In
   order to use these in your forms, you need to indicate the kind of form and whether the field is
   required or optional. The result is six helper functions: areq,
    aopt, mreq, mopt, ireq, and
    iopt.</p>
  <p id="x-12" class="hascomments">Forms have significant power available. They can automatically insert Javascript to help you
   leverage nicer UI controls, such as a jQuery UI date picker. Forms are also fully i18n-ready, so
   you can support a global community of users. And when you have more specific needs, you can slap
   on some validation functions to an existing field, or write a new one from scratch.</p>
 </html>