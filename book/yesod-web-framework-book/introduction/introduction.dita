<?xml version="1.0" encoding="UTF-8"?>
<html><h1>Introduction</h1><p id="i1" class="hascomments">Since web programming began, people have been trying to make the development process a more pleasant one. As a community, we have continually pushed new techniques to try and solve some of the lingering difficulties of security threats, the stateless nature of HTTP, the multiple languages (HTML, CSS, Javascript) necessary to create a powerful web application, and more.</p><p id="i2" class="hascomments">Yesod attempts to ease the web development process by playing to the strengths of the Haskell programming language. Haskell's strong compile-time guarantees of correctness not only encompass types; referential transparency ensures that we don't have any unintended side effects. Pattern matching on algebraic data types can help guarantee we've accounted for every possible case. By building upon Haskell, entire classes of bugs disappear.</p><p id="i3" class="hascomments">Unfortunately, using Haskell isn't enough. The web, by its very nature, is not type safe. Even the simplest case of distinguishing between an integer and string is impossible: all data on the web is transferred as raw bytes, evading our best efforts at type safety. Every app writer is left with the task of validating all input. I call this problem <dfn id="x2">the boundary issue</dfn>: as much as your application is type safe on the inside, every boundary with the outside world still needs to be sanitized.</p><h2>Type Safety</h2><p id="ts1" class="hascomments">This is where Yesod comes in. By using high-level declarative techniques, you can specify the exact input types you are expecting. And the process works the other way as well: using a process of type-safe URLs, you can make sure that the data you send out is also guaranteed to be well formed.</p><p id="ts2" class="hascomments">The boundary issue is not just a problem when dealing with the client: the same problem exists when persisting and loading data. Once again, Yesod saves you on the boundary by performing the marshaling of data for you. You can specify your entities in a high-level definition and remain blissfully ignorant of the details.</p><h2>Concise</h2><p id="c1" class="hascomments">We all know that there is a lot of boilerplate coding involved in web applications. Wherever possible, Yesod tries to use Haskell's features to save your fingers the work:</p><ul id="x1"><li id="x2">The forms library reduces the amount of code used for common cases by leveraging the Applicative type class.</li><li id="x3">Routes are declared in a very terse format, without sacrificing type safety.</li><li id="x4">Serializing your data to and from a database is handled automatically via code generation.</li></ul><p id="c2" class="hascomments">In Yesod, we have two kinds of code generation. To get your project started, we provide a scaffolding tool to set up your file and folder structure. However, most code generation is done at compile time via meta programming. This means your generated code will never get stale, as a simple library upgrade will bring all your generated code up-to-date.</p><p id="c3" class="hascomments">But for those who like to stay in control, and know exactly what their code is doing, you can always run closer to the compiler and write all your code yourself.</p><h2>Performance</h2><p id="p1" class="hascomments">Haskell's main compiler, the GHC, has amazing performance characteristics, and is improving all the time. This choice of language by itself gives Yesod a large performance advantage over other offerings. But that's not enough: we need an architecture designed for performance.</p><p id="p2" class="hascomments">Our approach to templates is one example: by allowing HTML, CSS and JavaScript to be
            analyzed at compile time, Yesod both avoids costly disk I/O at runtime and can optimize
            the rendering of this code. But the architectural decisions go deeper: we use advanced
            techniques such as conduits and builders in the underlying libraries to make sure our
            code runs in constant memory, without exhausting precious file handles and other
            resources. By offering high-level abstractions, you can get highly compressed and
            properly cached CSS and JavaScript.</p><p id="p3" class="hascomments">Yesod's flagship web server, Warp, is the fastest Haskell web server around. When these two pieces of technology are combined, it produces one of the fastest web application deployment solutions available.</p><h2>Modular</h2><p id="m1" class="hascomments">Yesod has spawned the creation of dozens of packages, most of which are usable in a context outside of Yesod itself. One of the goals of the project is to contribute back to the community as much as possible; as such, even if you are not planning on using Yesod in your next project, a large portion of this book may still be relevant for your needs.</p><p id="m2" class="hascomments">Of course, these libraries have all been designed to integrate well together. Using the Yesod Framework should give you a strong feeling of consistency throughout the various APIs.</p><h2>A solid foundation</h2><p id="s1" class="hascomments">I remember once seeing a PHP framework advertising support for UTF-8. This struck me as
            surprising: you mean having UTF-8 support isn't automatic? In the Haskell world, issues
            like character encoding are already well addressed and fully supported. In fact, we
            usually have the opposite problem: there are a number of packages providing powerful and
            well-designed support for the problem. The Haskell community is constantly pushing the
            boundaries finding the cleanest, most efficient solutions for each challenge.</p><p id="s2" class="hascomments">The downside of such a powerful ecosystem is the complexity of choice. By using Yesod, you will already have most of the tools chosen for you, and you can be guaranteed they work together. Of course, you always have the option of pulling in your own solution.</p><p id="s3" class="hascomments">As a real-life example, Yesod and Hamlet (the default templating language) use blaze-builder for textual content generation. This choice was made because blaze provides the fastest interface for generating UTF-8 data. Anyone who wants to use one of the other great libraries out there, such as text, should have no problem dropping it in.</p><h2>Introduction to Haskell</h2><p id="intro1" class="hascomments">Haskell is a powerful, fast, type-safe, functional programming language. This book takes as an assumption that you are already familiar with most of the basics of Haskell. There are two wonderful books for learning Haskell, both of which are available for reading online:</p><ul id="x1"><li id="x2"><a href="http://learnyouahaskell.com" id="x3">Learn You a Haskell for Great Good!</a></li><li id="x4"><a href="http://book.realworldhaskell.org/read" id="x5">Real World Haskell</a></li></ul><p id="intro2" class="hascomments">Yesod relies on a few features in Haskell that most introductory tutorials do not
            cover. Though you will rarely need to understand how these work, it's always best to
            start off with a good appreciation for what your tools are doing. These are covered in
            the next chapter.</p></html>