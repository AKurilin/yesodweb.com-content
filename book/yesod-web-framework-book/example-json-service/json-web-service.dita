<?xml version="1.0" encoding="UTF-8"?>
<html><h1>JSON Web Service</h1>
  <p id="x1" class="hascomments">Let's create a very simple web service: it takes a JSON request and returns a JSON
            response. We're going to write the server in WAI/Warp, and the client in http-conduit. We'll be using aeson for
            JSON parsing and rendering. We could also write the server in Yesod itself, but for such
            a simple example, the extra features of Yesod don't add much.</p>
 <h2>Server</h2>
  <p id="x1" class="hascomments">WAI uses the conduit package to handle streaming request
            bodies, and efficiently generates responses using blaze-builder. aeson uses attoparsec for parsing; by using attoparsec-conduit we get easy interoperability with WAI. This plays out
            as:</p>
  <pre id="x7">{-# LANGUAGE OverloadedStrings #-}
import Network.Wai (Response, responseLBS, Application, requestBody)
import Network.HTTP.Types (status200, status400)
import Network.Wai.Handler.Warp (run)
import Data.Aeson.Parser (json)
import Data.Conduit.Attoparsec (sinkParser)
import Control.Monad.IO.Class (liftIO)
import Data.Aeson (Value, encode, object, (.=))
import Control.Exception (SomeException)
import Data.ByteString (ByteString)
import Data.Conduit (ResourceT, ($$))
import Control.Exception.Lifted (handle)

main :: IO ()
main = run 3000 app

app :: Application
app req = handle invalidJson $ do
    value &lt;- requestBody req $$ sinkParser json
    newValue &lt;- liftIO $ modValue value
    return $ responseLBS
        status200
        [("Content-Type", "application/json")]
        $ encode newValue

invalidJson :: SomeException -&gt; ResourceT IO Response
invalidJson ex = return $ responseLBS
    status400
    [("Content-Type", "application/json")]
    $ encode $ object
        [ ("message" .= show ex)
        ]

-- Application-specific logic would go here.
modValue :: Value -&gt; IO Value
modValue = return</pre>
 <h2>Client</h2>
  <p id="x1" class="hascomments">http-conduit was written as a companion to WAI. It too uses
    conduit and blaze-builder pervasively, meaning we once again
   get easy interop with aeson. A few extra comments for those not familiar with
    http-conduit:</p>
  <ul id="ul_4be25b01-52e2-414f-ba22-d6c0b97232c8">
   <li id="x3">A Manager is present to keep track of open connections, so
    that multiple requests to the same server use the same connection. You usually want to use the
     withManager function to create and clean up this
     Manager, since it is exception safe.</li>
   <li id="x6">We need to know the size of our request body, which can't be determined directly from
    a Builder. Instead, we convert the Builder into a lazy
     ByteString and take the size from there.</li>
   <li id="x7">There are a number of different functions for initiating a request. We use
     http, which allows us to directly access the data stream. There are other
    higher level functions (such as httpLbs) that let you ignore the issues of
    sources and get the entire body directly.</li>
  </ul>
  <pre id="x8">{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Conduit
    ( http, parseUrl, withManager, RequestBody (RequestBodyLBS)
    , requestBody, method, Response (..)
    )
import Data.Aeson (Value (Object, String))
import Data.Aeson.Parser (json)
import Data.Conduit (($$))
import Data.Conduit.Attoparsec (sinkParser)
import Control.Monad.IO.Class (liftIO)
import Data.Aeson (encode, (.=), object)

main :: IO ()
main = withManager $ \manager -&gt; do
    value &lt;- liftIO makeValue
    -- We need to know the size of the request body, so we convert to a
    -- ByteString
    let valueBS = encode value
    req' &lt;- liftIO $ parseUrl "http://localhost:3000/"
    let req = req' { method = "POST", requestBody = RequestBodyLBS valueBS }
    Response status headers body &lt;- http req manager
    resValue &lt;- body $$ sinkParser json
    liftIO $ handleResponse resValue

-- Application-specific function to make the request value
makeValue :: IO Value
makeValue = return $ object
    [ ("foo" .= ("bar" :: String))
    ]

-- Application-specific function to handle the response from the server
handleResponse :: Value -&gt; IO ()
handleResponse = print</pre>
 </html>