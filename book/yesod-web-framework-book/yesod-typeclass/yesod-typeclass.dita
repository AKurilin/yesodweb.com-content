<?xml version="1.0" encoding="UTF-8"?>
<html><p id="i1" class="hascomments">Every one of our Yesod applications requires an instance of the Yesod
            typeclass. FIXME this text is now out-of-date. So far, we've only seen the approot method, with the cryptic definition
                approot _ = "", and defaultLayout. In this
            chapter, we'll explore the meaning of the approot method, along with
            many other methods in the Yesod typeclass.</p><p id="i2" class="hascomments">The Yesod typeclass gives us a central place for defining settings for
            our application. Excluding the approot method, everything else has a
            default definition which is usually the right thing. But in order to build a powerful,
            customized application, you'll usually end up wanting to override at least a few of
            these methods.</p><p id="rpu1" class="hascomments">We've already mentioned how Yesod is able to automatically render type-safe URLs into a textual URL that can be inserted into an HTML page. Let's say we have a route definition that looks like:</p><pre id="x1">mkYesod "MyApp" [parseRoutes|
/some/path SomePathR GET
]</pre><p id="rpu2" class="hascomments">If we place SomePathR into a hamlet template, how does Yesod render
            it? Yesod always tries to construct absolute URLs. This is especially
            useful once we start creating XML sitemaps and Atom feeds, or sending emails. But in
            order to construct an absolute URL, we need to know the domain name of the
            application.</p><p id="rpu3" class="hascomments">You might think we could get that information from the user's request, but we still
            need to deal with ports. And even if we get the port number from the request, are we
            using HTTP or HTTPS? And even if you know that, such an approach would
            break one of our RESTful principles: depending on how the user submitted a request would
            generate different URLs. For example, we would generate different URLs depending if the
            user connected to "example.com" or "www.example.com".</p><p id="rpu4" class="hascomments">And finally, Yesod doesn't make any assumption about where you host your application. For example, I may have a mostly static site (http://static.example.com/), but I'd like to stick a Yesod-powered Wiki at /wiki/. There is no reliable way for an application to determine what subpath it is being hosted from. So instead of doing all of this guesswork, Yesod needs you to tell it the <dfn id="x5">application root</dfn>.</p><p id="rpu5" class="hascomments">Using the wiki example, you would write your Yesod instance as:</p><pre id="x6">instance Yesod MyWiki where
    approot _ = "http://static.example.com/wiki" -- FIXME this is out-of-date</pre><p id="rpu6" class="hascomments">Notice that there is no trailing slash there. Next, when Yesod wants to construct a URL
            for SomePathR, it determines that the relative path for
                SomePathR is /some/path, appends that to your
            approot and creates http://static.example.com/wiki/some/path.</p><p id="rpu7" class="hascomments">This also explains our cryptic approot _ = "" FIXME: for our
            examples in the book, we're always serving from the root of the domain (in our case,
                localhost). By using an empty string, SomePathR
            renders to /some/path, which works just fine. In real life
            applications, however, you should use a real application root.</p>
<aside id="x13" class="note">The first argument to approot FIXME is the site foundation. This means
            that you could load your approot at program initialization, store it in the foundation,
            and then retrieve it. This is in fact what the scaffolded site does, using a YAML config
            file.</aside>
<p id="rpu8" class="hascomments">And by the way, the site template generated by the scaffolding tool can load different
            settings for developing, testing, staging, and production builds, so you can easily test
            on one domain- like localhost- and serve from a different domain.</p><aside id="x8" class="note"><p id="rpu9" class="hascomments">To reiterate: even though for the simple cases in this book, the first argument to
                    approot is usually ignored, in real life code it usually isn't.
                We also need to keep that argument so that Haskell's type system can determine which
                instance of Yesod to use in grabbing the
                approot.</p></aside><p id="jp1" class="hascomments">In order to convert a type-safe URL into a text value, Yesod uses two helper functions.
            The first is the renderRoute method of the RenderRoute typeclass. Every type-safe URL is an instance of this
            typeclass. renderRoute converts a value into a list of path
            pieces. For example, our SomePathR from above would be
            converted into ["some", "path"].</p><aside id="x5" class="note"><p id="jp2" class="hascomments">Actually, renderRoute produces both the path pieces and a list of
                query-string parameters. The default instances of renderRoute
                always provide an empty list of query string parameters. However, it is possible to
                override this. One notable case is the static subsite, which puts a hash of the file
                contents in the query string for caching purposes.</p></aside><p id="jp3" class="hascomments">The other function is the joinPath method of the Yesod
            typeclass. This function takes four arguments: the foundation value, the application
            root, a list of path segments and a list of query string parameters, and returns a
            textual URL. The default implementation does the "right thing": it separates the path
            pieces by forward slashes, prepends the application root and appends the query
            string.</p><p id="jp4" class="hascomments">If you are happy with default URL rendering, you should not need to modify it. However, if you want to modify URL rendering to do things like append a trailing slash, this would be the place to do it.</p><p id="cp1" class="hascomments">The flip side to joinPath is cleanPath. Let's look at how it gets used in the dispatch process:</p><ol id="x3"><li id="x4">The path info requested by the user is split into a series of path pieces.</li><li id="x6">We pass the path pieces to the cleanPath function.</li><li id="x7">If cleanPath indicates a redirect (a Left response),
                then a 301 response is sent to the client. This is used to force canonical URLs (eg,
                remove extra slashes).</li><li id="x8">Otherwise, we try to dispatch using the response from cleanPath (a
                    Right). If this works, we return a response. Otherwise, we
                return a 404.</li></ol><p id="cp2" class="hascomments">This combination allows subsites to retain full control of how their URLs appear, yet allows master sites to have modified URLs. As a simple example, let's see how we could modify Yesod to always produce trailing slashes on URLs:</p><pre id="x9">-- START
{-# LANGUAGE TypeFamilies, QuasiQuotes, MultiParamTypeClasses, TemplateHaskell, OverloadedStrings #-}
import Yesod
import Network.HTTP.Types (encodePath)
import Blaze.ByteString.Builder.Char.Utf8 (fromText)
import qualified Data.Text as T
import qualified Data.Text.Encoding as TE
import Control.Arrow ((***))
import Data.Monoid (mappend)

data Slash = Slash

mkYesod "Slash" [parseRoutes|
/ RootR GET
/foo FooR GET
|]

instance Yesod Slash where
    joinPath _ ar pieces' qs' =
        fromText ar `mappend` encodePath pieces qs
      where
        qs = map (TE.encodeUtf8 *** go) qs'
        go "" = Nothing
        go x = Just $ TE.encodeUtf8 x
        pieces = pieces' ++ [""]

    -- We want to keep canonical URLs. Therefore, if the URL is missing a
    -- trailing slash, redirect. But the empty set of pieces always stays the
    -- same.
    cleanPath _ [] = Right []
    cleanPath _ s
        | dropWhile (not . T.null) s == [""] = -- the only empty string is the last one
            Right $ init s
        -- Since joinPath will append the missing trailing slash, we simply
        -- remove empty pieces.
        | otherwise = Left $ filter (not . T.null) s

getRootR = defaultLayout [whamlet|
&lt;p
    &lt;a href=@{RootR}&gt;RootR
&lt;p
    &lt;a href=@{FooR}&gt;FooR
|]

getFooR = getRootR

main = warpDebug 3000 Slash</pre><p id="cp3" class="hascomments">First, let's look at our joinPath implementation. This is copied almost
            verbatim from the default Yesod implementation, with one difference: we append an extra
            empty string to the end. When dealing with path pieces, an empty string will append
            another slash. So adding an extra empty string will force a trailing slash.</p><p id="cp4" class="hascomments">cleanPath is a little bit trickier. First, we check for the empty path
            like before, and if so pass it through as-is. We use Right to indicate that a redirect
            is not necessary. The next clause is actually checking for two different possible URL
            issues:</p><ul id="x11"><li id="x12">There is a double slash, which would show up as an empty string in the middle of our paths.</li><li id="x13">There is a missing trailing slash, which would show up as the last piece not being an empty string.</li></ul><p id="cp5" class="hascomments">Assuming neither of those conditions hold, then only the last piece is empty, and we
            should dispatch based on all but the last piece. However, if this is not the case, we
            want to redirect to a canonical URL. In this case, we strip out all empty pieces and do
            not bother appending a trailing slash, since joinPath will do that for
            us.</p><p id="dl1" class="hascomments">Most websites like to apply some general template to all of their pages.
                defaultLayout is the recommended approach for this. While you could
            just as easily define your own function and call that instead, when you override
                defaultLayout all of the Yesod-generated pages (error pages,
            authentication pages) automatically get this style.</p><p id="dl2" class="hascomments">Overriding is very straight-forward: we use widgetToPageContent
            to convert a Widget to a title, head tags and body tags, and then use
                hamletToRepHtml to convert a Hamlet template into a
                RepHtml. We can even add extra widget components, like a Lucius
            template. from within defaultLayout. An example should make this all
            clear:</p><pre id="x2">{-# LANGUAGE TypeFamilies, QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
data Layout = Layout
mkYesod "Layout" [parseRoutes|/ RootR GET|]
instance Yesod Layout where
-- START
    defaultLayout contents = do
        PageContent title headTags bodyTags &lt;- widgetToPageContent $ do
            addCassius [cassius|
#body
    font-family: sans-serif
#wrapper
    width: 760px
    margin: 0 auto
|]
            addWidget contents
        hamletToRepHtml [hamlet|
$doctype 5

&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{title}
        ^{headTags}
    &lt;body&gt;
        &lt;div id="wrapper"&gt;
            ^{bodyTags}
|]
-- STOP
getRootR = defaultLayout $ do
    setTitle "Root test"
    addCassius [cassius|body
    color: red
|]
    addHamlet [hamlet|&lt;h1&gt;Hello|]
main = warpDebug 4000 Layout</pre><p id="gm1" class="hascomments">Even though we haven't covered sessions yet, I'd like to mention
                getMessage here. A common pattern in web development is setting a
            message in one handler and displaying it in another. For example, if a user
                POSTs a form, you may want to redirect him/her to another page
            along with a "Form submission complete" message.</p>
        <aside id="x-5" class="note">This is commonly known as <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get" id="x-6">Post/Redirect/Get</a>.</aside><p id="gm2" class="hascomments">To facilitate this, Yesod comes built in with a pair of functions:
                setMessage sets a message in the user session, and
                getMessage retrieves the message (and clears it, so it doesn't
            appear a second time). It's recommended that you put the result of
                getMessage into your defaultLayout. For
            example:</p><pre id="x1">{-# LANGUAGE TypeFamilies, QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Yesod
data Layout = Layout
mkYesod "Layout" [parseRoutes|
/ RootR GET
/msg MsgR GET
|]
instance Yesod Layout where
-- START
    defaultLayout contents = do
        PageContent title headTags bodyTags &lt;- widgetToPageContent contents
        mmsg &lt;- getMessage
        hamletToRepHtml [hamlet|
$doctype 5

&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{title}
        ^{headTags}
    &lt;body&gt;
        $maybe msg &lt;- mmsg
            &lt;div #message&gt;#{msg}
        ^{bodyTags}
|]
-- STOP
getRootR = defaultLayout [whamlet|&lt;a href="@{MsgR}"&gt;message|]
getMsgR = setMessage "foo" &gt;&gt; redirect RootR &gt;&gt; return ()
main = warpDebug 4000 Layout
</pre><p id="gm3" class="hascomments">We'll cover getMessage/setMessage in more detail when
            we <a href="../../yesod-web-framework-book/sessions/sessions.dita" id="x2">discuss sessions</a>.</p><p id="cep1" class="hascomments">One of the marks of a professional web site is a properly designed error page. Yesod
            gets you a long way there by automatically using your defaultLayout for
            displaying error pages. But sometimes, you'll want to go even further. For this, you'll
            want to override the errorHandler method:</p><pre id="x1">{-# LANGUAGE TypeFamilies, QuasiQuotes, OverloadedStrings #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
import Yesod
data Layout = Layout
mkYesod "Layout" [parseRoutes|/ RootR GET|]
instance Yesod Layout where
-- START
    errorHandler NotFound = fmap chooseRep $ defaultLayout $ do
        setTitle "Request page not located"
        toWidget [hamlet|
&lt;h1&gt;Not Found
&lt;p&gt;We apologize for the inconvenience, but the requested page could not be located.
|]
    errorHandler other = defaultErrorHandler other
-- STOP
getRootR = defaultLayout [whamlet|Hello World|]
main = warpDebug 4000 Layout</pre><p id="cep2" class="hascomments">Here we specify a custom 404 error page. We can also use the
                defaultErrorHandler when we don't want to write a custom handler
            for each error type. Due to type constraints, we need to start off our methods with
                fmap chooseRep, but otherwise you can write a typical handler
            function.</p><p id="cep3" class="hascomments">In fact, you could even use special responses like redirects:</p><pre id="x2">{-# LANGUAGE TypeFamilies, QuasiQuotes, OverloadedStrings #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
import Yesod
data Layout = Layout
mkYesod "Layout" [parseRoutes|/ RootR GET|]
instance Yesod Layout where
-- START
    errorHandler NotFound = redirect RootR
    errorHandler other = defaultErrorHandler other
-- STOP
getRootR = defaultLayout [whamlet|Hello World|]
main = warpDebug 4000 Layout
</pre><aside id="x3" class="note">Even though you can do this, I don't actually recommend such practices. A 404 should be a 404.</aside>
  <aside id="in-scaffolding" class="note">The functionality described here is automatically included in the
   scaffolded site, so you don't need to worry about implementing this yourself.</aside>
  <p id="x-3" class="hascomments">One of the most powerful, and most intimidating, methods in the Yesod typeclass is
    addStaticContent. Remember that a Widget consists of multiple
   components, including CSS and Javascript. How exactly does that CSS/JS arrive in the user's
   browser? By default, they are served in the &lt;head&gt; of the page, inside
    &lt;style&gt; and &lt;script&gt; tags, respectively.</p>
  <p id="x-5" class="hascomments">That might be simple, but it's far from efficient. Every page load will now require loading up
   the CSS/JS from scratch, even if nothing changed! What we really want is to store this content in
   an external file and then refer to it from the HTML.</p>
  <p id="x-6" class="hascomments">This is where addStaticContent comes in. It takes three arguments:
   the filename extension of the content (css or js), the
   mime-type of the content (text/css or text/javascript) and the
   content itself. It will then return one of three possible results:</p>
  <dl id="x-7">
   
    <dt id="x-9">Nothing</dt>
    <dd id="x-10">No static file saving occurred; embed this content directly in the HTML. This is the default
     behavior.</dd>
   
   
    <dt id="x-12">Just (Left Text)</dt>
    <dd id="x-13">This content was saved in an external file, and use the given textual link to refer to
     it.</dd>
   
   
    <dt id="x-15">Just (Right (Route a, Query))</dt>
    <dd id="x-16">Same, but now use a type-safe URL along with some query string parameters.</dd>
   
  </dl>
  <p id="x-17" class="hascomments">The Left result is useful if you want to store your static files on
   an external server, such as a CDN or memory-backed server. The Right result is
   more commonly used, and ties in very well with the static subsite. This is the recommended
   approach for most applications, and is provided by the scaffolded site by default.</p>
  <aside id="x-18" class="note">You might be wondering: if this is the recommended approach, why isn't it the default? The
   problem is that it makes a number of assumptions that don't universally hold: your application
   has a static subsite, and the location of your static files.</aside>
  <p id="x-19" class="hascomments">The scaffolded addStaticContent does a number of intelligent things
   to help you out:</p>
  <ul id="ul_vlr_nmg_sd">
   <li id="x-20">It automatically minifies your Javascript using the hjsmin package.</li>
   <li id="x-22">It names the output files based on a hash of the file contents. This means you can set your
    cache headers to far in the future without fears of stale content.</li>
   <li id="x-23">Also, since filenames are based on hashes, you can be guaranteed that a file doesn't need to
    be written if a file with the same name already exists. The scaffold code automatically checks
    for the existence of that file, and avoids the costly disk I/O of a write if it's not
    necessary.</li>
  </ul>
 
  <p id="x-3" class="hascomments">Google recommends an important optimization: <a href="http://code.google.com/speed/page-speed/docs/request.html#ServeFromCookielessDomain" id="x-4">serve static files from a separate domain</a>. The advantage
   to this approach is that cookies set on your main domain are not sent when retrieving static
   files, thus saving on a bit of bandwidth.</p>
  <p id="x-5" class="hascomments">To facilitate this, we have the urlRenderOverride method. This method
   intercepts the normal URL rendering and sets a special value for some routes. For example, the
   scaffolding defines this method as:</p>
  <pre id="x-7">    urlRenderOverride y (StaticR s) =
        Just $ uncurry (joinPath y (Settings.staticRoot $ settings y)) $ renderRoute s
    urlRenderOverride _ _ = Nothing</pre>
  <p id="x-8" class="hascomments">This means that static routes are served from a special static root, which you can configure to
   be a different domain. This is a great example of the power and flexibility of type-safe URLs:
   with a single line of code you're able to change the rendering of static routes throughout all of
   your handlers.</p>
 
  <p id="x-4" class="hascomments">For simple applications, checking permissions inside each handler function can be a
   simple, convenient approach. However, it doesn't scale well. Eventually, you're going to want to
   have a more declarative approach. Many systems out there define ACLs, special config files, and a
   lot of other hocus-pocus. In Yesod, it's just plain old Haskell. There are three methods
   involved:</p>
  <dl id="x-5">
   
    <dt id="x-7">isWriteRequest</dt>
    <dd id="x-8">Determine if the current request is a "read" or "write" operations. By default,
     Yesod follows RESTful principles, and assumes GET, HEAD,
      OPTIONS, and TRACE requests are read-only, while all others
     are can write.</dd>
   
   
    <dt id="x-10">isAuthorized</dt>
    <dd id="x-11">Takes a route (i.e., type-safe URL) and a boolean indicating whether or not the
     request is a write request. It returns an AuthResult, which can have one of
     three values:<ul id="ul_tsw_jog_sd">
      <li id="x-12">Authorized</li>
      <li id="x-13">AuthenticationRequired</li>
      <li id="x-14">Unauthorized</li>
     </ul>By default, it returns Authorized for all requests.</dd>
   
   
    <dt id="x-16">authRoute</dt>
    <dd id="x-17">If isAuthorized returns AuthenticationRequired,
     then redirect to the given route. If no route is provided (the default), return a 403
     "Permission Denied" message.</dd>
   
  </dl>
  <p id="x-18" class="hascomments">These methods tie in nicely with the yesod-auth package,
   which is used by the scaffolded site to provide a number of authentication options, such as
   OpenID, BrowserID, email, username and Twitter. We'll cover more concrete examples in the <a href="../../yesod-web-framework-book/authentication-and-authorization/authentication-and-authorization.dita#file166-authentication-and-authorizationauthentication-and-authorization" id="x-20">auth chapter</a>.</p>
 
  <p id="x-3" class="hascomments">Not everything in the Yesod typeclass is complicated. Some methods are simple
   functions. Let's just go through the list:</p>
  <dl id="x-4">
   
    <dt id="x-6">encryptKey</dt>
    <dd id="x-7">Yesod uses client-side sessions, which are stored in encrypted, cryptographically-hashed
     cookies. Well, as long as you provide an encryption key. If this function returns Nothing, then
     sessions are disabled. This can be a useful optimization on sites that don't need session
     facilities, as it avoids an encrypt/decrypt pair on each request.</dd>
   
   
    <dt id="x-9">clientSessionDuration</dt>
    <dd id="x-10">How long a session should last for. By default, this is two hours.</dd>
   
   
    <dt id="x-12">sessionIpAddress</dt>
    <dd id="x-13">By default, sessions are tied to an individual IP address. If your users are sitting behind
     a proxy server, this can cause trouble when their IP suddenly changes. This setting lets you
     disable this security feature.</dd>
   
   
    <dt id="x-15">cookiePath</dt>
    <dd id="x-16">What paths within your current domain to set cookies for. The default is "/", and will
     almost always be correct. One exception might be when you're serving from a subpath within a
     domain (like our <a href="../../yesod-web-framework-book/yesod-typeclass/yesod-typeclass.dita#file66-rendering-and-parsing-urlstypeclass/rpu4" id="x-17">wiki example above</a>).</dd>
   
   
    <dt id="x-19">maximumContentLength</dt>
    <dd id="x-20">To prevent Denial of Server (DoS) attacks, Yesod will limit the size of request bodies. Some
     of the time, you'll want to bump that limit for some routes (e.g., a file upload page). This is
     where you'd do that.</dd>
   
   
    <dt id="x-22">yepnopeJs</dt>
    <dd id="x-23">You can specify the location of the <a href="http://yepnopejs.com/" id="x-24">yepnope</a> Javascript library. If this is given, then yepnope will be
     used to asynchronously load all of the Javascript on your page.</dd>
   
  </dl>
 <p id="s1" class="hascomments">The Yesod typeclass has a number of overrideable methods that allow you to configure your
            application. They are all optional, and provide
            sensible defaults. By using built-in Yesod constructs like
                defaultLayout and getMessage, you'll get a
            consistent look-and-feel throughout your site, including pages automatically generated
            by Yesod such as error pages and authentication.</p><p id="s2" class="hascomments">We haven't covered all the methods in the Yesod typeclass in this chapter. For a full
            listing of methods available, you should consult the Haddock documentation.</p></html>