<?xml version="1.0" encoding="UTF-8"?>
<html><h1>Basics</h1>
        <p id="x-3" class="hascomments">The first step with any new technology is getting it running. The goal of this chapter is
            to get you started with a simple Yesod application, and cover some of the basic concepts
            and terminology.</p>
    <h2>Hello World</h2><p id="hw1" class="hascomments">Let's get this book started properly: a simple web page that says Hello World:</p><pre id="x1"><code>{-# LANGUAGE TypeFamilies, QuasiQuotes, MultiParamTypeClasses,
             TemplateHaskell, OverloadedStrings #-}
import Yesod

data HelloWorld = HelloWorld

mkYesod "HelloWorld" [parseRoutes|
/ HomeR GET
|]

instance Yesod HelloWorld

getHomeR :: Handler RepHtml
getHomeR = defaultLayout [whamlet|Hello World!|]

main :: IO ()
main = warpDebug 3000 HelloWorld</code></pre><p id="hw2" class="hascomments">If you save that code in helloworld.hs and run it with runhaskell helloworld.hs, you'll get a web server running on port 3000. If you point your browser to <a href="http://localhost:3000" id="x6">http://localhost:3000</a>, you'll get the following HTML:</p><pre id="x7"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello World!&lt;/body&gt;&lt;/html&gt;</code></pre>
        <p id="x-3" class="hascomments">We'll refer back to this example through the rest of the chapter.</p><h2>Routing</h2><p id="routing1" class="hascomments">Like most modern web frameworks, Yesod follows a <a href="http://en.wikipedia.org/wiki/Front_Controller_pattern" id="x1">front controller pattern</a>. This means that every request to a
            Yesod application enters at the same point and is routed from there. As a contrast, in
            systems like PHP and ASP you usually create a number of different files, and the web
            server automatically directs requests to the relevant file.</p>
        <p id="x-3" class="hascomments">In addition, Yesod uses a declarative style for specifying routes. In our example above,
            this looked like:</p>
        <pre id="x-4"><code>mkYesod "HelloWorld" [parseRoutes|
/ HomeR GET
|]</code></pre>
        <aside id="x-10" class="note">mkYesod is a Template Haskell function, and
                parseRoutes is a QuasiQuoter.</aside>
        <p id="x-5" class="hascomments">In English, all this means is: <q id="x-6">In the HelloWorld application, create
                one route. I'd like to call it HomeR, it should listen for requests
                to / (the root of the application), and should answer
                    GET requests</q>. We call HomeR a <dfn id="x-8">resource</dfn>, which is where the "R" suffix comes from.<aside id="x-9" class="note">The R suffix on resource names is simply convention, but it's a fairly universally
                followed convention. It makes it just a bit easier to read and understand
                code.</aside></p>
        <p id="x-16" class="hascomments">The mkYesod TH function generates quite a bit of code here: a route data
            type, a dispatch function, and a render function. We'll look at this in more detail in
                <a href="../../yesod-web-framework-book/routing-and-handlers/routing-and-handlers.dita#file89-routing-and-handlersrouting-and-handlers" id="x-18">the routing chapter</a>. But by using the
                -ddump-splices GHC option, we can get an immediate look at the
            generated code. A much cleaned up version of it is:</p>
        <pre id="x-20"><code>{-# LANGUAGE TypeFamilies, MultiParamTypeClasses, OverloadedStrings #-}
import qualified Yesod.Routes.Dispatch
import Yesod.Routes.Class
import Yesod.Core

data HelloWorld = HelloWorld

-- START
instance RenderRoute HelloWorld where
  data Route HelloWorld = HomeR
    deriving (Show, Eq, Read)
  renderRoute HomeR = ([], [])

instance YesodDispatch HelloWorld HelloWorld where
    yesodDispatch master sub toMaster app404 app405 method pieces =
        case dispatch pieces of
            Just f -&gt; f
                master
                sub
                toMaster
                app404
                app405
                method
            Nothing -&gt; app404
      where
        dispatch = Yesod.Routes.Dispatch.toDispatch
            [ Yesod.Routes.Dispatch.Route [] False onHome
            ]
        onHome [] = Just $ \master sub toMaster _app404 app405 method -&gt;
            case method of
                "GET" -&gt; yesodRunner
                    (fmap chooseRep getHomeR)
                    master
                    sub
                    (Just HomeR)
                    toMaster
                _ -&gt; app405 HomeR
-- STOP

getHomeR = return ()

main :: IO ()
main = return ()</code></pre>
        <p id="x-21" class="hascomments">Some of that will likely not make sense yet. In particular, the implementation of
                yesodDispatch is a bit hairy to accomodate different dispatch
            approaches and fit the model necessary for our high-performance routing structures.
            However, the RenderRoute implementation with its associated data type
            should already give you a good feel for what's going on under the surface.</p><h2>Handler function</h2>
        <p id="x-3" class="hascomments">So we have a route named HomeR, and it responds to
                GET requests. How do you define your response? You write a <dfn id="x-4">handler function</dfn>. Yesod follows a standard naming scheme for these
            functions: it's the lower case method name (e.g., GET becomes
                get) followed by the route name. In this case, the function name
            would be getHomeR.</p><p id="handler1" class="hascomments">Most of the code you write in Yesod lives in handler functions. This is where you
            process user input, perform database queries and create responses. In our simple
            example, we create a response using the defaultLayout
            function. This function wraps up the content it's given in your site's template. By
            default, it produces an HTML file with a doctype and html,
                head and body tags. As we'll
            see in the <a href="../../yesod-web-framework-book/yesod-typeclass/yesod-typeclass.dita" id="x1">Yesod typeclass
                chapter</a>, this function can be overridden to do much more.</p><p id="handler2" class="hascomments">In our example, we pass [whamlet|Hello World!|] to
                defaultLayout. whamlet is another quasi-quoter. In
            this case, it converts Hamlet syntax into a Widget. Hamlet is the default HTML
            templating engine in Yesod. Together with its siblings Cassius, Lucius and Julius, you
            can create HTML, CSS and Javascript in a fully type-safe and compile-time-checked
            manner. We'll see much more about this in <a href="../../yesod-web-framework-book/shakespearean-templates/shakespearean-templates.dita#file52-shakespearean-templatestemplates" id="x-9">the Shakespeare chapter</a>.</p>
        <p id="x-10" class="hascomments">Widgets are another cornerstone of Yesod. They allow you to create modular
            components of a site consisting of HTML, CSS and Javascript and reuse them throughout
            your site. We'll get into more detail on them in <a href="../../yesod-web-framework-book/widgets-09/widgets.dita#file62-widgetswidgets" id="x-11">the widgets
            chapter</a>.</p><h2>The Foundation</h2><p id="foundation1" class="hascomments">The word "HelloWorld" shows up a number of times in our example. Every Yesod
            application has a <dfn id="x-3">foundation</dfn> datatype. This datatype must be an instance of
                <a href="../../yesod-web-framework-book/yesod-typeclass/yesod-typeclass.dita#file74-yesod-typeclasstypeclass" id="x-4">the Yesod typeclass</a>, which provides a central place for declaring a number
            of different settings controlling the execution of our application.</p>
        <p id="x-5" class="hascomments">In our case, this datatype is pretty boring: it doesn't contain any information.
            Nonetheless, the foundation is central to how our example runs: it ties together the
            routes with the instance declaration and lets it all be run. We'll see throughout this
            book that the foundation pops up in a whole bunch of places.</p>
        <p id="x-6" class="hascomments">But foundations don't have to be boring: they can be used to store lots of useful
            information, usually stuff that needs to be initialized at program launch and used
            throughout. Some very common examples are:</p>
        <ul id="ul_vzn_ucu_qd">
            <li id="x-7">A database connection pool.</li>
            <li id="x-8">Settings loaded from a config file.</li>
            <li id="x-9">An HTTP connection manager.</li>
        </ul><aside id="x4" class="note">
            <p id="foundation3" class="hascomments">By the way, the word Yesod (יסוד) means foundation in
                Hebrew.</p>
        </aside><h2>Running</h2><p id="running1" class="hascomments">Once again we mention HelloWorld in our main function. Our
            foundation contains all the information we need to route and respond to requests in our
            application; now we just need to convert it into something that can run. A useful
            function for this in Yesod is warpDebug, which runs the Warp webserver
            with debug output enabled on the specified port (here, it's 3000).</p><p id="running3" class="hascomments">One of the features of Yesod is that you aren't tied down to a single deployment
            strategy. Yesod is built on top of the Web Application Interface (WAI), allowing it to
            run on FastCGI, SCGI, Warp, or even as a desktop application using the Webkit library.
            We'll discuss some of these options in the <a href="../../yesod-web-framework-book/deploying-your-webapp/deploying-your-webapp.dita" id="x2">deployment
            chapter</a>. And at the end of this chapter, we will explain the <a href="../../yesod-web-framework-book/basics/basics.dita" id="x3">development server</a>.</p>
        <p id="x-3" class="hascomments">Warp is the premiere deployment option for Yesod. It is a lightweight, highly efficient
            web server developed specifically for hosting Yesod. It is also used outside of Yesod
            for other Haskell development (both framework and non-framework applications), as well
            as a standard file server in a number of production environments.</p><h2>Resources and type-safe URLs</h2><p id="resources1" class="hascomments">In our hello world, we defined just a single resource (HomeR). A
            web application is usually much more exciting with more than one page on it. Let's take
            a look:</p><pre id="x1"><code>{-# LANGUAGE TypeFamilies, QuasiQuotes, MultiParamTypeClasses,
             TemplateHaskell, OverloadedStrings #-}
import Yesod

data Links = Links

mkYesod "Links" [parseRoutes|
/ HomeR GET
/page1 Page1R GET
/page2 Page2R GET
|]

instance Yesod Links

getHomeR  = defaultLayout [whamlet|&lt;a href=@{Page1R}&gt;Go to page 1!|]
getPage1R = defaultLayout [whamlet|&lt;a href=@{Page2R}&gt;Go to page 2!|]
getPage2R = defaultLayout [whamlet|&lt;a href=@{HomeR}&gt;Go home!|]

main = warpDebug 3000 Links</code></pre><p id="resources2" class="hascomments">Overall, this is very similar to Hello World. Our foundation is now
                Links instead of HelloWorld, and in addition to
            the HomeR resource, we've added Page1R and
                Page2R. As such, we've also added two more handler functions:
                getPage1R and getPage2R.</p><p id="resources3" class="hascomments">The only truly new feature is inside the whamlet
            quasi-quotation. We'll delve into syntax in the <a href="../../yesod-web-framework-book/shakespearean-templates/shakespearean-templates.dita#file52-shakespearean-templatestemplates" id="x-15">Shakespeare chapter</a>, but we can see that:</p><pre id="x2"><code>&lt;a href=@{Page1R}&gt;Go to page 1!</code></pre><p id="resources4" class="hascomments">creates a link to the Page1R resource. The important thing to
            note here is that Page1R is a data constructor. By making each resource
            a data constructor, we have a feature called <dfn id="x3">type-safe URLs</dfn>.
            Instead of splicing together strings to create URLs, we simply create a plain old
            Haskell value. By using at-sign interpolation (@{...}), Yesod
            automatically renders those values to textual URLs before sending things off to the
            user. We can see how this is implemented by looking again at the
                -ddump-splices output:</p>
        <pre id="x-20"><code>{-# LANGUAGE TypeFamilies, OverloadedStrings #-}
import Yesod.Core

data Links = Links

-- START
instance RenderRoute Links where
    data Route Links = HomeR | Page1R | Page2R
      deriving (Show, Eq, Read)

    renderRoute HomeR  = ([], [])
    renderRoute Page1R = (["page1"], [])
    renderRoute Page2R = (["page2"], [])
-- STOP

main :: IO ()
main = return ()</code></pre>
        <p id="x-21" class="hascomments">In the Route associated type for Links, we have
            additional constructors for Page1R and Page2R. We also
            now have a better glimpse of the return values for returnRoute. The
            first part of the tuple gives the <dfn id="x-27">path pieces</dfn> for the given route. The
            second part gives the query string parameters; for almost all use cases, this will be an
            empty list.</p>
        <p id="x-3" class="hascomments">It's hard to over-estimate the value of type-safe URLs. They give you a huge
            amount of flexibility and robustness when developing your application. You can move URLs
            around at will without ever breaking links. <a href="../../yesod-web-framework-book/routing-and-handlers/routing-and-handlers.dita#file89-routing-and-handlersrouting-and-handlers" id="x-4">In the routing chapter</a>, we'll see that routes can take
            parameters, such as a blog entry URL taking the blog post ID.</p>
        <p id="x-5" class="hascomments">Let's say you want to switch from routing on the numerical post ID to a
            year/month/slug setup. In a traditional web framework, you would need to go through
            every single reference to your blog post route and update appropriately. If you miss
            one, you'll have 404s at runtime. In Yesod, all you do is update your route and compile:
            GHC will pinpoint every single line of code that needs to be corrected.</p><h2>The scaffolded site</h2>
    <p id="x-3" class="hascomments">Installing Yesod will give you both the Yesod library, as well as a yesod executable. This executable accepts a few commands, but the first one you'll
      want to be acquainted with is yesod init. It will ask you some
      questions, and then generate a folder containing the default <dfn id="x-6">scaffolded
        site</dfn>. Inside that folder, you can run cabal install
        --only-dependencies to build any extra dependencies (such as your database
      backends), and then <a href="../../yesod-web-framework-book/basics/basics.dita#file24-development-serverbasics" id="x-8">yesod devel</a> to run your site.</p>
    <p id="x-15" class="hascomments">The scaffolded site gives you a lot of best practices out of the box, setting up files and
      dependencies in a time-tested approach used by most production Yesod sites. However, all this
      convenience can get in the way of actually learning Yesod. Therefore, most of this book will
      avoid the scaffolding tool, and instead deal directly with Yesod as a library.</p>
    <p id="x-16" class="hascomments">We will cover the structure of the scaffolded site in more detail <a href="../../yesod-web-framework-book/scaffolding-and-the-site-template/scaffolding-and-the-site-template.dita#file177-scaffolding-and-the-site-templatescaffolding" id="x-17">later</a>.</p>
  <h2>Development server</h2><p id="wai-handler-devel1" class="hascomments">One of the advantages interpreted languages have over compiled languages
            is fast prototyping: you save changes to a file and hit refresh. If we want to make any
            changes to our Yesod apps above, we'll need to call runhaskell from
            scratch, which can be a bit tedious.</p><p id="wai-handler-devel2" class="hascomments">Fortunately, there's a solution to this: yesod
                devel automatically rebuilds and reloads your code for you. This can be a
            great way to develop your Yesod projects, and when you're ready to move to production,
            you still get to compile down to incredibly efficient code. The Yesod scaffolding
            automatically sets things up for you. This gives you the best of both worlds: rapid
            prototyping and fast production code.</p><p id="wai-handler-devel3" class="hascomments">It's a little bit more involved to set up your code to be used by
                yesod devel, so our examples will just use
                warpDebug. But when you're ready to make your real-world
            applications, yesod devel will be waiting for you.</p><h2>Summary</h2><p id="summary1" class="hascomments">Every Yesod application is built around a foundation datatype. We associate some
            resources with that datatype and define some handler functions, and Yesod handles all of
            the routing. These resources are also data constructors, which lets us have type-safe
            URLs.</p><p id="summary2" class="hascomments">By being built on top of WAI, Yesod applications can run with a number of different
            backends. warpDebug is an easy way to get started, as it's included
            with Yesod. For rapid development, you can use yesod devel is a good
            choice. And when you're ready to move to production, you have Warp as a high-performance
            option.</p>
        <p id="x-3" class="hascomments">When developing in Yesod, we get a number of choices for coding style:
            quasi-quotation or external files, warpDebug or yesod
                devel, and so on. The examples in this book will tend towards using the
            choices that are easiest to copy-and-paste, but the more powerful options will be
            available when you start building real Yesod applications.</p></html>