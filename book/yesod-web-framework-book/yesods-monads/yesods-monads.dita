<?xml version="1.0" encoding="UTF-8"?>
<html><h1>Yesod's Monads</h1>
  <p id="x-3" class="hascomments">As you've read through this book, there have been a number of monads which have
   appeared: Handler, Widget and
    YesodDB (for Persistent). As with most monads, each one provides some specific
   functionality: Handler gives access to the request and allows you to
   send responses, a Widget contains HTML, CSS, and Javascript, and
    YesodDB let's you make database queries. In Model-View-Controller
   (MVC) terms, we could consider YesodDB to be the model, Widget
   to be the view, and Handler to be the controller.</p>
  <p id="x-4" class="hascomments">So far, we've presented some very straight-forward ways to use these monads: your main
   handler will run in Handler, using runDB to execute a
    YesodDB query, and defaultLayout to return a
   Widget, which in turn was created by calls to toWidget.</p>
  <p id="x-5" class="hascomments">However, if we have a deeper understanding of these types, we can achieve some fancier
   results.</p>
 <h2>Monad Transformers</h2>
  <blockquote id="x-3">Monads are like onions. Monads are not like cakes.<cite id="x-5">Shrek, more or less</cite></blockquote>
  <p id="x-6" class="hascomments">Before we get into the heart of Yesod's monads, we need to understand a bit about
   monad transformers. (If you already know all about monad transformers, you can likely skip this
   section.) Different monads provide different functionality: Reader allows
   read-only access to some piece of data throughout a computation, Error allows
   you to short-circuit computations, and so on.</p>
  <p id="x-7" class="hascomments">Often times, however, you would like to be able to combine a few of these features
   together. After all, why not have a computation with read-only access to some settings variable,
   that could error out at any time? One approach to this would be to write a new monad like
    ReaderError, but this has the obvious downside of exponential complexity:
   you'll need to write a new monad for every single possible combination.</p>
  <p id="x-8" class="hascomments">Instead, we have monad transformers. In addition to Reader, we have
    ReaderT, which adds reader functionality to any other monad. So we could
   represent our ReaderError as (conceptually):</p>
  <pre id="x-9"><code>type ReaderError = ReaderT Error</code></pre>
  <p id="x-10" class="hascomments">In order to access our settings variable, we can use the ask function. But what about short-circuiting a computation? We'd like to use
    throwError, but that won't exactly work. Instead, we need to lift our call into the next monad up. In other words:</p>
  <pre id="x-13"><code>throwError :: errValue -&gt; Error
lift . throwError :: errValue -&gt; ReaderT Error</code></pre>
  <p id="x-14" class="hascomments">There are a few things you should pick up here:</p>
  <ul id="ul_d29d1697-acc1-4f67-8cc6-a1b8305f865a">
   <li id="x-15">A transformer can be used to add functionality to an existing monad.</li>
   <li id="x-16">A transformer must always wrap around an existing monad.</li>
   <li id="x-17">The functionality available in a wrapped monad will be dependent not only on the
    monad transformer, but also on the inner monad that is being wrapped.</li>
  </ul>
  <p id="x-18" class="hascomments">A great example of that last point is the IO monad. No matter how
   many layers of transformers you have around an IO, there's still an
    IO at the core, meaning you can perform I/O in any of these <dfn id="x-19">monad transformer stacks</dfn>. You'll often see code that looks like liftIO
    $ putStrLn "Hello There!".</p>
 <h2>The Three Transformers</h2>
  <p id="x-6" class="hascomments">We've already discussed two of our transformers previously: Handler and
    Widget. Just to recap, there are two special things about these
   transformers:</p>
  <ol id="ol_izz_wma_af">
   <li id="x-22">In order to simplify error messages, they are not actual transformers. Instead, they are
    newtypes that hard-code their inner monads.<aside id="x-23" class="note">Remember, this is why Yesod provides a
     specialized lift function, which works for Handler and
      Widget.</aside></li>
   <li id="x-27">In reality they have extra type parameters for the sub and master site. As a result, the
    Yesod libraries provide GHandler sub master a and GWidget sub master
     a, and each site gets a pair of type synonyms type Handler = GHandler MyApp
     MyApp and type Widget = GWidget MyApp My App ().</li>
  </ol>
  <p id="x-3" class="hascomments">In persistent, we have a typeclass called
    PersistStore. This typeclass defines all of the primitive operations you can
   perform on a database, like get. This typeclass essentially looks like
    class (Monad (b m)) =&gt; PersistStore b m. b is the backend itself, and is in fact a monad transformer, while m is the inner monad that b wraps around. Both SQL and
   MongoDB have their own instances; in the case of SQL, it looks like:</p>
  <pre id="x-11"><code>instance MonadBaseControl IO m =&gt; PersistBackend SqlPersist m</code></pre>
  <p id="x-12" class="hascomments">This means that you can run a SQL database with any underlying monad, so long as that
   underlying monad supports MonadBaseControl IO, which allows you to
   properly deal with exceptions in a monad stack. That basically means any transformer stack built
   around IO (besides exceptional cases like ContT).
   Fortunately for us, that includes both Handler and Widget. The
   takeaway here is that we can layer our Persistent transformer on top of Handler
   or Widget.</p>
  <aside id="x-38" class="note">This wasn't always the case. Before Yesod 0.10, Yesod was built on top of enumerators, which
   do not support MonadBaseControl. In Yesod 0.10, we moved over to
    conduit, which greatly simplified everything we're discussing here.</aside>
  <p id="x-17" class="hascomments">In order to make it simpler to refer to the relevant Persistent transformer, the
    yesod-persistent package defines the YesodPersistBackend
   associated type. For example, if I have a site called MyApp and it uses SQL, I
   would define something like type instance YesodPersistBackend MyApp =
   SqlPersist.</p>
  <p id="x-40" class="hascomments">When we want to run our database actions, we'll have a SqlPersist
   wrapped around a Handler or Widget. We can then use the
   standard Persistent unwrap functions (like runSqlPool) to run the action and get
   back a normal Handler/Widget. To automate this, we provide the
    runDB function. Putting it all together, we can now run database actions inside
   our handlers and widgets.</p>
  <p id="x-68" class="hascomments">Most of the time in Yesod code, and especially thus far in this book, widgets have
   been treated as actionless containers that simply combine together HTML, CSS and Javascript. But
   if you look at that last paragraph again, you'll realize that's not the way things have to be.
   Since a widget is a transformer on top of a handler, anything you do in a handler can be done in
   a widget, including database actions. All you have to do is lift.</p>
 <h2>Example: Database-driven navbar</h2>
  <p id="x-3" class="hascomments">Let's put some of this new knowledge into action. We want to create a
                Widget that generates its output based on the contents of the
            database. Previously, our approach would have been to load up the data in a
                Handler, and then pass that data into a Widget.
            Now, we'll do the loading of data in the Widget itself. This is a boon
            for modularity, as this Widget can be used in any
                Handler we want, without any need to pass in the database
            contents.</p>
  <pre id="x-4"><code>{-# LANGUAGE OverloadedStrings, TypeFamilies, TemplateHaskell, FlexibleContexts,
             QuasiQuotes, TypeFamilies, MultiParamTypeClasses, GADTs #-}
import Yesod
import Database.Persist.Sqlite
import Data.Text (Text)
import Data.Time

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persist|
Link
    title Text
    url Text
    added UTCTime
|]

data LinksExample = LinksExample ConnectionPool

mkYesod "LinksExample" [parseRoutes|
/ RootR GET
/add-link AddLinkR POST
|]

instance Yesod LinksExample

instance RenderMessage LinksExample FormMessage where
    renderMessage _ _ = defaultFormMessage

instance YesodPersist LinksExample where
    type YesodPersistBackend LinksExample = SqlPersist
    runDB db = do
        LinksExample pool &lt;- getYesod
        runSqlPool db pool

getRootR :: Handler RepHtml
getRootR = defaultLayout [whamlet|
&lt;form method=post action=@{AddLinkR}&gt;
    &lt;p&gt;
        Add a new link to #
        &lt;input type=url name=url value=http://&gt;
        \ titled #
        &lt;input type=text name=title&gt;
        \ #
        &lt;input type=submit value="Add link"&gt;
&lt;h2&gt;Existing links
^{existingLinks}
|]

existingLinks :: Widget
existingLinks = do
    links &lt;- lift $ runDB $ selectList [] [LimitTo 5, Desc LinkAdded]
    [whamlet|
&lt;ul&gt;
    $forall Entity _ link &lt;- links
        &lt;li&gt;
            &lt;a href=#{linkUrl link}&gt;#{linkTitle link}
|]

postAddLinkR :: Handler ()
postAddLinkR = do
    url &lt;- runInputPost $ ireq urlField "url"
    title &lt;- runInputPost $ ireq textField "title"
    now &lt;- liftIO getCurrentTime
    runDB $ insert $ Link title url now
    setMessage "Link added"
    redirect RootR

main :: IO ()
main = withSqlitePool "links.db3" 10 $ \pool -&gt; do
    runSqlPool (runMigration migrateAll) pool
    warpDebug 3000 $ LinksExample pool</code></pre>
  <p id="x-5" class="hascomments">Pay attention in particular to the existingLinks function.
            Notice how all we needed to do was apply lift to a normal
            database action. And from within getRootR, we treated existingLinks like any ordinary Widget,
            no special parameters at all. See the figure for the output of this app.</p>
  <figure id="x-14"><figcaption>Screenshot of the navbar</figcaption>
      
   <img src="../../images/navbar.png" id="image_xpd_yzj_zd" placement="inline"/>
  </figure>
 <h2>Example: Request information</h2>
  <p id="x-3" class="hascomments">Likewise, you can get request information inside a Widget. Here we
            can determine the sort order of a list based on a GET parameter.</p>
  <pre id="x-4"><code>{-# LANGUAGE OverloadedStrings, TypeFamilies, TemplateHaskell,
             QuasiQuotes, TypeFamilies, MultiParamTypeClasses, GADTs #-}
import Yesod
import Data.Text (Text)
import Data.List (sortBy)
import Data.Ord (comparing)

data Person = Person
    { personName :: Text
    , personAge :: Int
    }

people :: [Person]
people =
    [ Person "Miriam" 25
    , Person "Eliezer" 3
    , Person "Michael" 26
    , Person "Gavriella" 1
    ]

data People = People

mkYesod "People" [parseRoutes|
/ RootR GET
|]

instance Yesod People

instance RenderMessage People FormMessage where
    renderMessage _ _ = defaultFormMessage


getRootR :: Handler RepHtml
getRootR = defaultLayout [whamlet|
&lt;p&gt;
    &lt;a href="?sort=name"&gt;Sort by name
    \ | #
    &lt;a href="?sort=age"&gt;Sort by age
    \ | #
    &lt;a href="?"&gt;No sort
^{showPeople}
|]

showPeople :: Widget
showPeople = do
    msort &lt;- lift $ runInputGet $ iopt textField "sort"
    let people' =
            case msort of
                Just "name" -&gt; sortBy (comparing personName) people
                Just "age"  -&gt; sortBy (comparing personAge)  people
                _           -&gt; people
    [whamlet|
&lt;dl&gt;
    $forall person &lt;- people'
        &lt;dt&gt;#{personName person}
        &lt;dd&gt;#{show $ personAge person}
|]

main :: IO ()
main = warpDebug 3000 People</code></pre>
  <p id="x-5" class="hascomments">Once again, all we need to do is lift our normal
                Handler code (in this case, runInputGet) to have
            it run in our Widget.</p>
 <h2>Summary</h2>
  <p id="x-3" class="hascomments">If you completely ignore this chapter, you'll still be able to use Yesod to great benefit. The
   advantage of understanding how Yesod's monads interact is to be able to produce cleaner, more
   modular code. Being able to perform arbitrary actions in a Widget can be a
   powerful tool, and understanding how Persistent and your Handler code interact
   can help you make more informed design decisions in your app.</p>
 </html>