<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Understanding a Request</title>

  <para>You can often times get away with using Yesod for quite a while
  without needing to understand its internal workings. However, such an
  understanding is often times advantageous. This chapter will walk you
  through the request handling process for a fairly typical Yesod application.
  Note that a fair amount of this discussion involves code changes in Yesod
  1.2. Most of the concepts are the same in previous versions, though the data
  types involved were a bit messier.</para>

  <para>Yesod’s usage of Template Haskell to bypass boilerplate code can make
  it a bit difficult to understand this process sometimes. If beyond the
  information in this chapter you wish to further analyze things, it can be
  useful to view GHC’s generated code using
  <code>-ddump-splices</code>.</para>

  <note>
    <para>A lot of this information was originally published as a blog series
    on the 1.2 release. You can see the blog posts at:</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="http://www.yesodweb.com/blog/2013/03/yesod-1-2-cleaner-internals">Yesod
        1.2’s cleaner internals</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://www.yesodweb.com/blog/2013/03/big-subsite-rewrite">Big
        Subsite Rewrite</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://www.yesodweb.com/blog/2013/03/yesod-dispatch-version-1-2">Yesod
        dispatch, version 1.2</ulink></para>
      </listitem>
    </itemizedlist>
  </note>

  <section>
    <title>Handlers</title>

    <para>When trying to understand Yesod request handling, we need to look at
    two components: how a request is dispatched to the appropriate handler
    code, and how handler functions are processed. We’ll start off with the
    latter, and then circle back to understanding the dispatch process
    itself.</para>

    <section>
      <title>Layers</title>

      <para>Yesod builds itself on top of WAI, which provides a protocol for
      web servers (or, more generally, <emphasis>handlers</emphasis>) and
      applications to communicate with each other. This is expressed through
      two datatypes: <code>Request</code> and <code>Response</code>. Then, an
      <code>Application</code> is defined as <code>type Application = Request
      -&gt; ResourceT IO Response</code>. A WAI handler will take an
      application and run it.</para>

      <para><code>Request</code> and <code>Response</code> are both very
      low-level, trying to represent the HTTP protocol without too much
      embellishment. This keeps WAI as a generic tool, but also leaves out a
      lot of the information we need in order to implement a web framework.
      For example, WAI will provide us with the raw data for all request
      headers. But Yesod needs to parse that to get cookie information, and
      then parse the cookies in order to extract session information.</para>

      <para>To deal with this dichotomy, Yesod introduces two new data types:
      <code>YesodRequest</code> and <code>YesodResponse</code>.
      <code>YesodRequest</code> contains a WAI <code>Request</code>, and also
      adds in such request information as cookies and session variables, and
      on the response side can either be a standard WAI <code>Response</code>,
      or be a higher-level representation of such a response including such
      things as updated session information and extra response headers. To
      parallel WAI’s <code>Application</code>, we have <code>type YesodApp =
      YesodRequest -&gt; ResourceT IO YesodResponse</code>.</para>

      <para>But as a Yesod user, you never really see <code>YesodApp</code>.
      There’s another layer on top of that which you are used to dealing with:
      <code>Handler</code>. When you write handler functions, you need to have
      access to three different things:</para>

      <itemizedlist>
        <listitem>
          <para>The <code>YesodRequest</code> value for the current
          request.</para>
        </listitem>

        <listitem>
          <para>Some basic environment information, like how to log messages
          or handle error conditions. This is provided by the datatype
          <code>RunHandlerEnv</code>.</para>
        </listitem>

        <listitem>
          <para>A mutable variable to keep track of updateable information,
          such as the headers to be returned and the user session state. This
          is called <code>GHState</code>.</para>

          <note>
            <para>I know that’s not a great name, but it’s there for
            historical reasons.</para>
          </note>
        </listitem>
      </itemizedlist>

      <para>So when you’re writing a handler function, you’re essentially just
      writing in a <code>Reader</code> monad that has access to all of this
      information. The <code>runHandler</code> function will turn a
      <code>Handler</code> into a <code>YesodApp</code>.
      <code>yesodRunner</code> takes this a step further and converts all the
      way to a WAI <code>Application</code>.</para>
    </section>

    <section>
      <title>Content</title>

      <para>Our example above, and many others you’ve already seen, give a
      handler with a type of <code>Handler Html</code>. We’ve just described
      what the <code>Handler</code> means, but how does Yesod know how to deal
      with <code>Html</code>? The answer lies in the
      <code>ToTypedContent</code> typeclass. The relevants bit of code
      are:</para>

      <programlisting language="haskell">data Content = ContentBuilder !BBuilder.Builder !(Maybe Int) -- ^ The content and optional content length.
             | ContentSource !(Source (ResourceT IO) (Flush BBuilder.Builder))
             | ContentFile !FilePath !(Maybe FilePart)
             | ContentDontEvaluate !Content
data TypedContent = TypedContent !ContentType !Content

class ToContent a where
    toContent :: a -&gt; Content
class ToContent a =&gt; ToTypedContent a where
    toTypedContent :: a -&gt; TypedContent</programlisting>

      <para>The <code>Content</code> datatype represents the different ways
      you can provide a response body. The first three mirror WAI’s
      representation directly. The fourth (<code>ContentDontEvaluate</code>)
      is used to indicate to Yesod whether response bodies should be fully
      evaluated before being returned to users. The advantage to fully
      evaluating is that we can provide meaningful error messages if an
      exception is thrown from pure code. The downside is possibly increased
      time and memory usage.</para>

      <para>In any event, Yesod knows how to turn a <code>Content</code> into
      a response body. The <code>ToContent</code> typeclass provides a way to
      allow many different datatypes to be converted into response bodies.
      Many commonly used types are already instances of
      <code>ToContent</code>, including strict and lazy
      <code>ByteString</code> and <code>Text</code>, and of course
      <code>Html</code>.</para>

      <para><code>TypedContent</code> adds an extra piece of information: the
      content type of the value. As you might expect, there are
      <code>ToTypedContent</code> instances for a number of common datatypes,
      including HTML, JSON, and plain text.</para>

      <programlisting>instance ToTypedContent J.Value where
    toTypedContent v = TypedContent typeJson (toContent v)
instance ToTypedContent Html where
    toTypedContent h = TypedContent typeHtml (toContent h)
instance ToTypedContent T.Text where
    toTypedContent t = TypedContent typePlain (toContent t)</programlisting>

      <para>Putting this all together: a <code>Handler</code> is able to
      return any value which is an instance of <code>ToTypedContent</code>,
      and Yesod will handle turning it into an appropriate representation and
      setting the <code>Content-Type</code> response header.</para>
    </section>

    <section>
      <title>Short-circuit responses</title>

      <para>One other oddity is how short-circuiting works. For example, you
      can call <code>redirect</code> in the middle of a handler function, and
      the rest of the function will not be called. The mechanism we use is
      standard Haskell exceptions. Calling <code>redirect</code> just throws
      an exception of type <code>HandlerContents</code>. The
      <code>runHandler</code> function will catch any exceptions thrown and
      produce an appropriate response. For <code>HandlerContents</code>, each
      constructor gives a clear action to perform, be it redirecting or
      sending a file. For all other exception types, an error message is
      displayed to the user.</para>
    </section>
  </section>

  <section>
    <title>Dispatch</title>

    <para>Dispatch is the act of taking an incoming request and generating an
    appropriate response. We have a few different constraints regarding how we
    want to handle dispatch:</para>

    <itemizedlist>
      <listitem>
        <para>Dispatch based on path segments (or pieces).</para>
      </listitem>

      <listitem>
        <para>Optionally dispatch on request method.</para>
      </listitem>

      <listitem>
        <para>Support subsites: packaged collections of functionality
        providing multiple routes under a specific URL prefix.</para>
      </listitem>

      <listitem>
        <para>Support using WAI applications as subsites, while introducing as
        little runtime overhead to the process as possible. In particular, we
        want to avoid performing any unnecessary parsing to generate a
        <code>YesodRequest</code> if it won’t be used.</para>
      </listitem>
    </itemizedlist>

    <para>The lowest common denominator for this would be to simply use a WAI
    <code>Application</code>. However, this doesn’t provide quite enough
    information: we need access to the foundation datatype, the logger, and
    for subsites how a subsite route is converted to a parent site route. To
    address this, we have two helper data types (<code>YesodRunnerEnv</code>
    and <code>YesodSubRunnerEnv</code>) providing this extra information for
    normal sites and subsites.</para>

    <para>With those types, dispatch now becomes a relatively simple matter:
    give me an environment and a request, and I’ll give you a response. This
    is represented by the typeclasses <code>YesodDispatch</code> and
    <code>YesodSubDispatch</code>:<programlisting language="haskell">class Yesod site =&gt; YesodDispatch site where
    yesodDispatch :: YesodRunnerEnv site -&gt; W.Application

class YesodSubDispatch sub m where
    yesodSubDispatch :: YesodSubRunnerEnv sub (HandlerSite m) m
                     -&gt; W.Application
</programlisting></para>

    <para>We’ll see a bit later how <code>YesodSubDispatch</code> is used.
    Let’s first understand how <code>YesodDispatch</code> comes into
    play,<code></code><emphasis></emphasis></para>

    <section>
      <title>toWaiApp, toWaiAppPlain, and warp</title>

      <para>Let’s assume for the moment that you have a datatype which is an
      instance of <code>YesodDispatch</code>. You’ll want to now actually run
      this thing somehow. To do this, we need to convert it into a WAI
      application and pass it to some kind of a WAI handler/server. To start
      this journey, we use <code>toWaiAppPlain</code>. It performs any appwide
      initialization necessary. At the time of writing, this means allocating
      a logger and setting up the session backend, but more functionality may
      be added in the future. Using this data, we can now create a
      <code>YesodRunnerEnv</code>. And when that value is passed to
      <code>yesodDispatch</code>, we get a WAI application.</para>

      <para>We’re almost done. The final remaining modification is path
      segment cleanup. The <code>Yesod</code> typeclass includes a member
      function named <code>cleanPath</code> which can be used to create
      canonical URLs. For example, the default implementation would remove
      double slashes and redirect a user from <literal>/foo//bar</literal> to
      <literal>/foo/bar</literal>. <code>toWaiAppPlain</code> adds in some
      pre-processing to the normal WAI request by analyzing the requested path
      and performing cleanup/redirect as necessary.</para>

      <para>At this point, we have a fully functional WAI application. There
      are two other helper functions included. <code>toWaiApp</code> wraps
      <code>toWaiAppPlain</code> and additionally includes some commonly used
      WAI middlewares, including request logging and GZIP compression. (Please
      see the Haddocks for an up-to-date list.) We finally have the
      <code>warp</code> function which, as you might guess, runs your
      application with Warp.</para>

      <note>
        <para>There’s also the <code>warpEnv</code> function, which reads the
        port number information from the PORT environment variable. This is
        used for interacting with certain tools, including the Keter
        deployment manager and the FP Complete School of Haskell.</para>
      </note>
    </section>

    <section>
      <title>Generated code</title>

      <para>The last remaining black box is the Template Haskell generated
      code. This generated code is responsible for handling some of the
      tedious, error-prone pieces of your site. If you want to, you can write
      these all by hand instead. We’ll demonstrate what that translation would
      look like, and in the process elucidate how <code>YesodDispatch</code>
      and <code>YesodSubDispatch</code> work. Let’s start with a fairly
      typical Yesod application.</para>

      <programlisting language="haskell">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
import qualified Data.ByteString.Lazy.Char8 as L8
import           Network.HTTP.Types         (status200)
import           Network.Wai                (pathInfo, rawPathInfo,
                                             requestMethod, responseLBS)
import           Yesod

data App = App

mkYesod "App" [parseRoutes|
/only-get       OnlyGetR   GET
/any-method     AnyMethodR
/has-param/#Int HasParamR  GET
/my-subsite     MySubsiteR WaiSubsite getMySubsite
|]

instance Yesod App

getOnlyGetR :: Handler Html
getOnlyGetR = defaultLayout
    [whamlet|
        &lt;p&gt;Accessed via GET method
        &lt;form method=post action=@{AnyMethodR}&gt;
            &lt;button&gt;POST to /any-method
    |]

handleAnyMethodR :: Handler Html
handleAnyMethodR = do
    req &lt;- waiRequest
    defaultLayout
        [whamlet|
            &lt;p&gt;In any-method, method == #{show $ requestMethod req}
        |]

getHasParamR :: Int -&gt; Handler String
getHasParamR i = return $ show i

getMySubsite :: App -&gt; WaiSubsite
getMySubsite _ =
    WaiSubsite app
  where
    app req = return $ responseLBS
        status200
        [("Content-Type", "text/plain")]
        $ L8.pack $ concat
            [ "pathInfo == "
            , show $ pathInfo req
            , ", rawPathInfo == "
            , show $ rawPathInfo req
            ]

main :: IO ()
main = warp 3000 App</programlisting>

      <para>For completeness we’ve provided a full listing, but let’s focus on
      just the Template Haskell portion:</para>

      <programlisting language="haskell">mkYesod "App" [parseRoutes|
/only-get       OnlyGetR   GET
/any-method     AnyMethodR
/has-param/#Int HasParamR  GET
/my-subsite     MySubsiteR WaiSubsite getMySubsite
|]</programlisting>

      <para>While this generates a few pieces of code, we only need to
      replicate three components to make our site work. Let’s start with the
      simplest: the <code>Handler</code> type synonym:</para>

      <programlisting language="haskell">type Handler = HandlerT App IO</programlisting>

      <para>Next is the type-safe URL and its rendering function. The
      rendering function is allowed to generate both path segments and query
      string parameters. Standard Yesod sites never generate query-string
      parameters, but it is technically possible. And in the case of subsites,
      this often does happen. Notice how we handle the <code>qs</code>
      parameter for the <code>MySubsiteR</code> case:</para>

      <programlisting language="haskell">instance RenderRoute App where
    data Route App = OnlyGetR
                   | AnyMethodR
                   | HasParamR Int
                   | MySubsiteR (Route WaiSubsite)
        deriving (Show, Read, Eq)

    renderRoute OnlyGetR = (["only-get"], [])
    renderRoute AnyMethodR = (["any-method"], [])
    renderRoute (HasParamR i) = (["has-param", toPathPiece i], [])
    renderRoute (MySubsiteR subRoute) =
        let (ps, qs) = renderRoute subRoute
         in ("my-subsite" : ps, qs)</programlisting>

      <para>You can see that there’s a fairly simple mapping from the
      higher-level route syntax and the <code>RenderRoute</code> instance.
      Each route becomes a constructor, each URL parameter becomes an argument
      to its constructor, we embed a route for the subsite, and use
      <code>toPathPiece</code> to render parameters to text.</para>

      <para>The final component is the <code>YesodDispatch</code> instance.
      Let’s look at this in a few pieces.</para>

      <programlisting language="haskell">instance YesodDispatch App where
    yesodDispatch env req =
        case pathInfo req of
            ["only-get"] -&gt;
                case requestMethod req of
                    "GET" -&gt; yesodRunner
                        getOnlyGetR
                        env
                        (Just OnlyGetR)
                        req
                    _ -&gt; yesodRunner
                        (badMethod &gt;&gt; return ())
                        env
                        (Just OnlyGetR)
                        req</programlisting>

      <para>As described above, <code>yesodDispatch</code> is handed both an
      environment and a WAI <code>Request</code> value. We can now perform
      dispatch based on the requested path, or in WAI terms, the
      <code>pathInfo</code>. Referring back to our original high-level route
      syntax, we can see that our first route is going to be the single piece
      <code>only-get</code>, which we pattern match for.</para>

      <note>
        <para>In reality, Yesod generates a much more efficient data structure
        to perform routing. We’ve used simple pattern matching here so as not
        to obscure the point. For more information, please see the <ulink
        url="https://github.com/yesodweb/yesod/blob/master/yesod-routes/Yesod/Routes/Dispatch.lhs">Yesod.Routes.Dispatch</ulink>.</para>
      </note>

      <para>Once that match has succeeded, we additionally pattern match on
      the request method; if it’s <literal>GET</literal>, we use the handler
      function <code>getOnlyGetR</code>. Otherwise, we want to return a 405
      bad method response, and therefore use the <code>badMethod</code>
      handler. At this point, we’ve come full circle to our original handler
      discussion. You can see that we’re using <code>yesodRunner</code> to
      execute our handler function. As a reminder, this will take our
      environment and WAI <code>Request</code>, convert it to a
      <code>YesodRequest</code>, constructor a <code>RunHandlerEnv</code>,
      hand that to the handler function, and then convert the resulting
      <code>YesodResponse</code> into a WAI <code>Response.</code></para>

      <para>Wonderful; one down, three to go. The next one is even
      easier.</para>

      <programlisting language="haskell">            ["any-method"] -&gt;
                yesodRunner handleAnyMethodR env (Just AnyMethodR) req</programlisting>

      <para>Unlike <code>OnlyGetR</code>, <code>AnyMethodR</code> will work
      for any request method, so we don’t need to perform any further pattern
      matching.</para>

      <programlisting language="haskell">            ["has-param", t] | Just i &lt;- fromPathPiece t -&gt;
                case requestMethod req of
                    "GET" -&gt; yesodRunner
                        (getHasParamR i)
                        env
                        (Just $ HasParamR i)
                        req
                    _ -&gt; yesodRunner
                        (badMethod &gt;&gt; return ())
                        env
                        (Just $ HasParamR i)
                        req</programlisting>

      <para>We add in one extra complication here: a dynamic parameter. While
      we used <code>toPathPiece</code> to render to a textual value above, we
      now use <code>fromPathPiece</code> to perform the parsing. Assuming the
      parse succeeds, we then follow a very similar dispatch system as was
      used for <code>OnlyGetR</code>. The prime difference is that our
      parameter needs to be passed to both the handler function and the route
      data constructor.</para>

      <para>Next we’ll look at the subsite, which is quite different.</para>

      <programlisting language="haskell">            ("my-subsite":rest) -&gt; yesodSubDispatch
                YesodSubRunnerEnv
                    { ysreGetSub = getMySubsite
                    , ysreParentRunner = yesodRunner
                    , ysreToParentRoute = MySubsiteR
                    , ysreParentEnv = env
                    }
                req { pathInfo = rest }</programlisting>

      <para>Unlike the other pattern matches, here we just look to see if our
      pattern prefix matches. Any route beginning with
      <literal>/my-subsite</literal> should be passed off to the subsite for
      processing. This is where we finally get to use
      <code>yesodSubDispatch</code>. This function closely mirrors
      <code>yesodDispatch</code>. We need to construct a new environment to be
      passed to it. Let’s discuss the four records:</para>

      <itemizedlist>
        <listitem>
          <para><code>ysreGetSub</code> demonstrates how to get the subsite
          foundation type from the master site. We provide
          <code>getMySubsite</code>, which is the function we provided in the
          high-level route syntax.</para>
        </listitem>

        <listitem>
          <para><code>ysreParentRunner</code> provides a means of running a
          handler function. It may seem a bit boring to just provide
          <code>yesodRunner</code>, but by having a separate parameter we
          allow the construction of deeply nested subsites, which will wrap
          and unwrap many layers of interleaving subsites. (This is a more
          advanced concept which we won’t be covering in this chapter.)</para>
        </listitem>

        <listitem>
          <para><code>ysreToParentRoute</code> will convert a route for the
          subsite into a route for the parent site. This is the purpose of the
          <code>MySubsiteR</code> constructor. This allows subsites to use
          functions such as <code>getRouteToParent</code>.</para>
        </listitem>

        <listitem>
          <para><code>ysreParentEnv</code> simply passes on the initial
          environment, which contains a number of things the subsite may need
          (such as logger).</para>
        </listitem>
      </itemizedlist>

      <para>The other interesting thing is how we modify the
      <code>pathInfo</code>. This allows subsites to <emphasis>continue
      dispatching</emphasis> from where the parent site left off. To
      demonstrate how this works, see some screenshots of various requests in
      the following figure.</para>

      <figure>
        <title>Path info in subsite</title>

        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../images/subsite-path-info.png" />
            </imageobject>
          </mediaobject>
        </screenshot>
      </figure>

      <para>And finally, not all requests will be valid routes. For those
      cases, we just want to respond with a 404 not found.</para>

      <programlisting>            _ -&gt; yesodRunner (notFound &gt;&gt; return ()) env Nothing req</programlisting>
    </section>

    <section>
      <title>Complete code</title>

      <para>Following is the full code for the non-Template Haskell
      approach.</para>

      <programlisting language="haskell">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
import qualified Data.ByteString.Lazy.Char8 as L8
import           Network.HTTP.Types         (status200)
import           Network.Wai                (pathInfo, rawPathInfo,
                                             requestMethod, responseLBS)
import           Yesod
import           Yesod.Core.Types           (YesodSubRunnerEnv (..))

data App = App

instance RenderRoute App where
    data Route App = OnlyGetR
                   | AnyMethodR
                   | HasParamR Int
                   | MySubsiteR (Route WaiSubsite)
        deriving (Show, Read, Eq)

    renderRoute OnlyGetR = (["only-get"], [])
    renderRoute AnyMethodR = (["any-method"], [])
    renderRoute (HasParamR i) = (["has-param", toPathPiece i], [])
    renderRoute (MySubsiteR subRoute) =
        let (ps, qs) = renderRoute subRoute
         in ("my-subsite" : ps, qs)

type Handler = HandlerT App IO

instance Yesod App

instance YesodDispatch App where
    yesodDispatch env req =
        case pathInfo req of
            ["only-get"] -&gt;
                case requestMethod req of
                    "GET" -&gt; yesodRunner
                        getOnlyGetR
                        env
                        (Just OnlyGetR)
                        req
                    _ -&gt; yesodRunner
                        (badMethod &gt;&gt; return ())
                        env
                        (Just OnlyGetR)
                        req
            ["any-method"] -&gt;
                yesodRunner handleAnyMethodR env (Just AnyMethodR) req
            ["has-param", t] | Just i &lt;- fromPathPiece t -&gt;
                case requestMethod req of
                    "GET" -&gt; yesodRunner
                        (getHasParamR i)
                        env
                        (Just $ HasParamR i)
                        req
                    _ -&gt; yesodRunner
                        (badMethod &gt;&gt; return ())
                        env
                        (Just $ HasParamR i)
                        req
            ("my-subsite":rest) -&gt; yesodSubDispatch
                YesodSubRunnerEnv
                    { ysreGetSub = getMySubsite
                    , ysreParentRunner = yesodRunner
                    , ysreToParentRoute = MySubsiteR
                    , ysreParentEnv = env
                    }
                req { pathInfo = rest }
            _ -&gt; yesodRunner (notFound &gt;&gt; return ()) env Nothing req

getOnlyGetR :: Handler Html
getOnlyGetR = defaultLayout
    [whamlet|
        &lt;p&gt;Accessed via GET method
        &lt;form method=post action=@{AnyMethodR}&gt;
            &lt;button&gt;POST to /any-method
    |]

handleAnyMethodR :: Handler Html
handleAnyMethodR = do
    req &lt;- waiRequest
    defaultLayout
        [whamlet|
            &lt;p&gt;In any-method, method == #{show $ requestMethod req}
        |]

getHasParamR :: Int -&gt; Handler String
getHasParamR i = return $ show i

getMySubsite :: App -&gt; WaiSubsite
getMySubsite _ =
    WaiSubsite app
  where
    app req = return $ responseLBS
        status200
        [("Content-Type", "text/plain")]
        $ L8.pack $ concat
            [ "pathInfo == "
            , show $ pathInfo req
            , ", rawPathInfo == "
            , show $ rawPathInfo req
            ]

main :: IO ()
main = warp 3000 App</programlisting>
    </section>
  </section>

  <section>
    <title>Conclusion</title>

    <para>Yesod abstracts away quite a bit of the plumbing from you as a
    developer. Most of this is boilerplate code that you’ll be happy to
    ignore. But it can be empowering to understand exactly what’s going on
    under the surface. At this point, you should hopefully be able- with help
    from the Haddocks- to write a site without any of the autogenerated
    Template Haskell code. Not that I’d recommend it; I think using the
    generated code is easier and safer.</para>

    <para>One particular advantage of understanding this material is seeing
    where Yesod sits in the world of WAI. This makes it easier to see how
    Yesod will interact with WAI middleware, or how to include code from other
    WAI framework in a Yesod application (or vice-versa!).</para>
  </section>
</chapter>