<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"><chapter>
   <title>monad-control</title>
   <para>NOTE: This chapter has not yet been converted to Yesod 1.2. Some information may be slightly out-of-date.</para>
   <para/>
   <para>
    <function>monad-control</function> is used in a few places within Yesod, most notably to ensure proper exception handling within Persistent. It is a general purpose package to extend standard functionality in monad transformers.</para>
   <section>
    <title>Overview</title>
    <para/>
    <para>One of the powerful, and sometimes confusing, features in Haskell is monad transformers. They
   allow you to take different pieces of functionality- such as mutable state, error handling, or
   logging- and compose them together easily. Though I swore I'd never write a monad tutorial, I'm
   going to employ a painful analogy here: monads are like onions. (Monads are not like cakes.) By
   that, I mean <emphasis>layers</emphasis>.</para>
    <para>We have the core monad- also known as the innermost or bottom monad. On top of this
   core, we add layers, each adding a new feature and spreading outward/upward. As a motivating
   example, let's consider an Error monad stacked on top of the IO
   monad:<programlisting language="haskell">newtype ErrorT e m a = ErrorT { runErrorT :: m (Either e a) }
type MyStack = ErrorT MyError IO</programlisting>Now
   pay close attention here: ErrorT is just a simple newtype around an Either wrapped in a monad.
   Getting rid of the newtype, we
   have:<programlisting language="haskell">type ErrorTUnwrapped e m a = m (Either e a)</programlisting>
    </para>
    <para>At some point, we'll need to actually perform some IO inside our MyStack. If we went with the
   unwrapped approach, it would be trivial, since there would be no ErrorT constructor in the way.
   However, we need that newtype wrapper for a whole bunch of type reasons I won't go into here
   (this isn't a monad transformer tutorial after all). So the solution is the MonadTrans
   typeclass:</para>
    <programlisting language="haskell">class MonadTrans t where
    lift :: Monad m =&gt; m a -&gt; t m a</programlisting>
    <para>I'll admit, the first time I saw that type signature, my response was stunned confusion, and
   incredulity that it actually meant anything. But looking at an instance helps a
   bit:<programlisting language="haskell">instance (Error e) =&gt; MonadTrans (ErrorT e) where
    lift m = ErrorT $ do
        a &lt;- m
        return (Right a)</programlisting>All
   we're doing is wrapping the inside of the IO with a Right value, and then applying our newtype
   wrapper. This allows us to take an action that lives in IO, and "lift" it to the outer/upper
   monad.</para>
    <para>But now to the point at hand. This works very well for simple functions. For example:</para>
    <programlisting language="haskell">sayHi :: IO ()
sayHi = putStrLn "Hello"

sayHiError :: ErrorT MyError IO ()
sayHiError = lift $ putStrLn "Hello"</programlisting>
    <para>But let's take something slightly more complicated, like a callback:</para>
    <programlisting language="haskell">withMyFile :: (Handle -&gt; IO a) -&gt; IO a
withMyFile = withFile "test.txt" WriteMode

sayHi :: Handle -&gt; IO ()
sayHi handle = hPutStrLn handle "Hi there"

useMyFile :: IO ()
useMyFile = withMyFile sayHi</programlisting>
    <para>So far so good, right? Now let's say that we need a version of sayHi that has access to the
   Error monad:</para>
    <programlisting language="haskell">sayHiError :: Handle -&gt; ErrorT MyError IO ()
sayHiError handle = do
    lift $ hPutStrLn handle "Hi there, error!"
    throwError MyError</programlisting>
    <para>We would like to write a function that combines withMyFile and sayHiError.
   Unfortunately, GHC doesn't like this very
   much:<programlisting language="haskell">useMyFileErrorBad :: ErrorT MyError IO ()
useMyFileErrorBad = withMyFile sayHiError

    Couldn't match expected type `ErrorT MyError IO ()'
                with actual type `IO ()'</programlisting>Why
   does this happen, and how can we work around it?</para>
   </section>
   <section>
    <title>Intuition</title>
    <para/>
    <para>Let's try and develop an external intuition of what's happening here. The ErrorT monad
   transformer adds extra functionality to the IO monad. We've defined a way to "tack on" that extra
   functionality to normal IO actions: we add that Right constructor and wrap it all in ErrorT.
   Wrapping in Right is our way of saying "it went OK," there wasn't anything wrong with this
   action.</para>
    <para>Now this intuitively makes sense: since the IO monad doesn't have the concept of returning a
   MyError when something goes wrong, it will always succeed in the lifting phase. (Note: This has
    <emphasis role="bold">nothing</emphasis> to do with runtime exceptions, don't even think about them.) What we have is a
   guaranteed one-directional translation up the monad stack.</para>
    <para>Let's take another example: the Reader monad. A Reader has access to some extra piece of data
   floating around. Whatever is running in the inner monad doesn't know about that extra piece of
   information. So how would you do a lift? You just ignore that extra information. The Writer
   monad? Don't write anything. State? Don't change anything. I'm seeing a pattern here.</para>
    <para>But now let's try and go in the opposite direction: I have something in a Reader, and I'd like
   to run it in the base monad (e.g., IO). Well... that's not going to work, is it? I need that
   extra piece of information, I'm relying on it, and it's not there. There's simply no way to go in
   the opposite direction without providing that extra value.</para>
    <para>Or is there? If you remember, we'd pointed out earlier that ErrorT is just a simple wrapper
   around the inner monad. In other words, if I have <literal>errorValue :: ErrorT MyError IO
    MyValue</literal>, I can apply <literal>runErrorT</literal> and get a value of type <literal>IO
    (Either MyError MyValue)</literal>. The looks quite a bit like bi-directional translation,
   doesn't it?</para>
    <para>Well, not quite. We originally had an <literal>ErrorT MyError IO</literal> monad, with a value of
   type <literal>MyValue</literal>. Now we have a monad of type <literal>IO</literal> with a value of
   type <literal>Either MyError MyValue</literal>. So this process has in fact changed the value,
   while the lifting process leaves it the same.</para>
    <para>But still, with a little fancy footwork we can unwrap the ErrorT, do some processing, and then
   wrap it back up again.</para>
    <programlisting language="haskell">useMyFileError1 :: ErrorT MyError IO ()
useMyFileError1 =
    let unwrapped :: Handle -&gt; IO (Either MyError ())
        unwrapped handle = runErrorT $ sayHiError handle
        applied :: IO (Either MyError ())
        applied = withMyFile unwrapped
        rewrapped :: ErrorT MyError IO ()
        rewrapped = ErrorT applied
     in rewrapped</programlisting>
    <para>This is the crucial point of this whole article, so look closely. We first unwrap our monad.
   This means that, to the outside world, it's now just a plain old IO value. Internally, we've
   stored all the information from our ErrorT transformer. Now that we have a plain old IO, we can
   easily pass it off to withMyFile. withMyFile takes in the internal state and passes it back out
   unchanged. Finally, we wrap everything back up into our original ErrorT.</para>
    <para>This is the entire pattern of monad-control: we embed the extra features of our monad
   transformer inside the value. Once in the value, the type system ignores it and focuses on the
   inner monad. When we're done playing around with that inner monad, we can pull our state back out
   and reconstruct our original monad stack.</para>
   </section>
   <section>
    <title>Types</title>
    <para/>
    <para>I purposely started with the ErrorT transformer, as it is one of the simplest for this
   inversion mechanism. Unfortunately, others are a bit more complicated. Take for instance ReaderT.
   It is defined as <literal>newtype ReaderT r m a = ReaderT { runReaderT :: r -&gt; m a }</literal>. If
   we apply <literal>runReaderT</literal> to it, we get a function that returns a monadic value. So
   we're going to need some extra machinery to deal with all that stuff. And this is when we leave
   Kansas behind.</para>
    <para>There are a few approaches to solving these problems. In the past, I implemented a solution
   using type families in the <function>neither</function> package. Anders Kaseorg implemented a much
   more straight-forward solution in <function>monad-peel</function>. And for efficiency, in
    <function>monad-control</function>, Bas van Dijk uses CPS (continuation passing style) and
   existential types.</para>
    <note>
     <para>The code taken from monad-control actually applies to version 0.2. 0.3 changed things just a
   bit, by making the state explicit with an associated type, and generalizing
    <literal>MonadControlIO</literal> to <literal>MonadBaseControl</literal>, but the concepts are still
   the same.</para>
    </note>
    <para>The first type we're going to look at
   is:<programlisting language="haskell">type Run t = forall n o b. (Monad n, Monad o, Monad (t o)) =&gt; t n b -&gt; n (t o b)</programlisting>That's
   incredibly dense, let's talk it out. The only "input" datatype to this thing is t, a monad
   transformer. A Run is a function that will then work with <emphasis role="bold">any</emphasis> combination of types n, o
   and b (that's what the forall means). n and o are both monads, while b is a simple value
   contained by them.</para>
    <para>The left hand side of the Run function, <literal>t n b</literal>, is our monad transformer
   wrapped around the n monad and holding a b value. So for example, that could be a <literal>MyTrans
    FirstMonad MyValue</literal>. It then returns a value with the transformer "popped" inside, with
   a brand new monad at its core. In other words, <literal>FirstMonad (MyTrans NewMonad
    MyValue)</literal>.</para>
    <para>That might sound pretty scary at first, but it actually isn't as foreign as you'd think: this
   is essentially what we did with ErrorT. We started with ErrorT on the outside, wrapping around
   IO, and ended up with an IO by itself containing an Either. Well guess what: another way to
   represent an Either is <literal>ErrorT MyError Identity</literal>. So essentially, we pulled the IO
   to the outside and plunked an Identity in its place. We're doing the same thing in a Run: pulling
   the FirstMonad outside and replacing it with a NewMonad.<note>
      <para>Now might be a good time to get a
    beer.</para>
     </note>
    </para>
    <para>Alright, now we're getting somewhere. If we had access to one of those Run functions, we could
   use it to peel off the ErrorT on our sayHiError function and pass it to withMyFile. With the
   magic of undefined, we can play such a game:</para>
    <programlisting language="haskell">errorRun :: Run (ErrorT MyError)
errorRun = undefined

useMyFileError2 :: IO (ErrorT MyError Identity ())
useMyFileError2 =
    let afterRun :: Handle -&gt; IO (ErrorT MyError Identity ())
        afterRun handle = errorRun $ sayHiError handle
        applied :: IO (ErrorT MyError Identity ())
        applied = withMyFile afterRun
     in applied</programlisting>
    <para>This looks eerily similar to our previous example. In fact, errorRun is acting almost
   identically to runErrorT. However, we're still left with two problems: we don't know where to get
   that errorRun value from, and we still need to restructure the original ErrorT after we're
   done.</para>
    <section>
     <title>MonadTransControl</title>
     <para/>
     <para>Obviously in the specific case we have before us, we could use our knowledge of the ErrorT
   transformer to beat the types into submission and create our Run function manually. But what we
    <emphasis>really</emphasis> want is a general solution for many transformers. At this point, you know we need
   a typeclass.</para>
     <para>So let's review what we need: access to a Run function, and some way to restructure our
   original transformer after the fact. And thus was born MonadTransControl, with its single method
   liftControl:</para>
     <programlisting language="haskell">class MonadTrans t =&gt; MonadTransControl t where
    liftControl :: Monad m =&gt; (Run t -&gt; m a) -&gt; t m a</programlisting>
     <para>Let's look at this closely. liftControl takes a function (the one we'll be writing). That
   function is provided with a Run function, and must return a value in some monad (m). liftControl
   will then take the result of that function and reinstate the original transformer on top of
   everything.</para>
     <programlisting language="haskell">useMyFileError3 :: Monad m =&gt; ErrorT MyError IO (ErrorT MyError m ())
useMyFileError3 =
    liftControl inside
  where
    inside :: Monad m =&gt; Run (ErrorT MyError) -&gt; IO (ErrorT MyError m ())
    inside run = withMyFile $ helper run
    helper :: Monad m
           =&gt; Run (ErrorT MyError) -&gt; Handle -&gt; IO (ErrorT MyError m ())
    helper run handle = run (sayHiError handle :: ErrorT MyError IO ())</programlisting>
     <para>Close, but not exactly what I had in mind. What's up with the double monads? Well, let's start
   at the end: sayHiError handle returns a value of type <literal>ErrorT MyError IO ()</literal>. This
   we knew already, no surprises. What might be a little surprising (it got me, at least) is the
   next two steps.</para>
     <para>First we apply run to that value. Like we'd discussed before, the result is that the IO inner
   monad is popped to the outside, to be replaced by some arbitrary monad (represented by m here).
   So we end up with an IO (ErrorT MyError m ()). Ok... We then get the same result after applying
   withMyFile. Not surprising.</para>
     <para>The last step took me a long time to understand correctly. Remember how we said that we
   reconstruct the original transformer? Well, so we do: by plopping it right on top of everything
   else we have. So our end result is the previous type- <literal>IO (ErrorT MyError m ())</literal>-
   with a <literal>ErrorT MyError</literal> stuck on the front.</para>
     <para>Well, that seems just about utterly worthless, right? Well, almost. But don't forget, that "m"
   can be any monad, including IO. If we treat it that way, we get <literal>ErrorT MyError IO (ErrorT
    MyError IO ())</literal>. That looks a lot like <literal>m (m a)</literal>, and we want just plain
   old <literal>m a</literal>. Fortunately, now we're in
   luck:<programlisting language="haskell">useMyFileError4 :: ErrorT MyError IO ()
useMyFileError4 = join useMyFileError3</programlisting>And
   it turns out that this usage is so common, that Bas had mercy on us and defined a helper
   function:<programlisting language="haskell">control :: (Monad m, Monad (t m), MonadTransControl t)
        =&gt; (Run t -&gt; m (t m a)) -&gt; t m a
control = join . liftControl</programlisting>So
   all we need to write
   is:<programlisting language="haskell">useMyFileError5 :: ErrorT MyError IO ()
useMyFileError5 =
    control inside
  where
    inside :: Monad m =&gt; Run (ErrorT MyError) -&gt; IO (ErrorT MyError m ())
    inside run = withMyFile $ helper run
    helper :: Monad m
           =&gt; Run (ErrorT MyError) -&gt; Handle -&gt; IO (ErrorT MyError m ())
    helper run handle = run (sayHiError handle :: ErrorT MyError IO ())</programlisting>
     </para>
     <para>And just to make it a little
   shorter:<programlisting language="haskell">useMyFileError6 :: ErrorT MyError IO ()
useMyFileError6 = control $ \run -&gt; withMyFile $ run . sayHiError</programlisting>
     </para>
    </section>
    <section>
     <title>MonadControlIO</title>
     <para/>
     <para>The MonadTrans class provides the lift method, which allows you to lift an action one level in
   the stack. There is also the MonadIO class that provides liftIO, which lifts an IO action as far
   in the stack as desired. We have the same breakdown in monad-control. But first, we need a
   corrolary to
   Run:<programlisting language="haskell">type RunInBase m base = forall b. m b -&gt; base (m b)</programlisting>Instead
   of dealing with a transformer, we're dealing with two monads. base is the underlying monad, and m
   is a stack built on top of it. RunInBase is a function that takes a value of the entire stack,
   pops out that base, and puts in on the outside. Unlike in the Run type, we don't replace it with
   an arbitrary monad, but with the original one. To use some more concrete types:</para>
     <programlisting language="haskell">RunInBase (ErrorT MyError IO) IO = forall b. ErrorT MyError IO b -&gt; IO (ErrorT MyError IO b)</programlisting>
     <para>This should look fairly similar to what we've been looking at so far, the only difference is
   that we want to deal with a specific inner monad. Our MonadControlIO class is really just an
   extension of MonadControlTrans using this RunInBase.</para>
     <programlisting language="haskell">class MonadIO m =&gt; MonadControlIO m where
    liftControlIO :: (RunInBase m IO -&gt; IO a) -&gt; m a</programlisting>
     <para>Simply put, liftControlIO takes a function which receives a RunInBase. That RunInBase can be
   used to strip down our monad to just an IO, and then liftControlIO builds everything back up
   again. And like MonadControlTrans, it comes with a helper function</para>
     <programlisting language="haskell">controlIO :: MonadControlIO m =&gt; (RunInBase m IO -&gt; IO (m a)) -&gt; m a
controlIO = join . liftControlIO</programlisting>
     <para>We can easily rewrite our previous example with
   it:<programlisting language="haskell">useMyFileError7 :: ErrorT MyError IO ()
useMyFileError7 = controlIO $ \run -&gt; withMyFile $ run . sayHiError</programlisting>And
   as an advantage, it easily scales to multiple
   transformers:<programlisting language="haskell">sayHiCrazy :: Handle -&gt; ReaderT Int (StateT Double (ErrorT MyError IO)) ()
sayHiCrazy handle = liftIO $ hPutStrLn handle "Madness!"

useMyFileCrazy :: ReaderT Int (StateT Double (ErrorT MyError IO)) ()
useMyFileCrazy = controlIO $ \run -&gt; withMyFile $ run . sayHiCrazy</programlisting>
     </para>
    </section>
   </section>
   <section>
    <title>Real Life Examples</title>
    <para/>
    <para>Let's solve some real-life problems with this code. Probably the biggest motivating use case is
   exception handling in a transformer stack. For example, let's say that we want to automatically
   run some cleanup code when an exception is thrown. If this were normal IO code, we'd
   use:<programlisting language="haskell">onException :: IO a -&gt; IO b -&gt; IO a</programlisting>But if we're
   in the ErrorT monad, we can't pass in either the action or the cleanup. In comes controlIO to the
   rescue:<programlisting language="haskell">onExceptionError :: ErrorT MyError IO a
                 -&gt; ErrorT MyError IO b
                 -&gt; ErrorT MyError IO a
onExceptionError action after = controlIO $ \run -&gt;
    run action `onException` run after</programlisting>
    </para>
    <para>Let's say we need to allocate some memory to store a Double in. In the IO monad, we could just
   use the alloca function. Once again, our solution is
   simple:<programlisting language="haskell">allocaError :: (Ptr Double -&gt; ErrorT MyError IO b)
            -&gt; ErrorT MyError IO b
allocaError f = controlIO $ \run -&gt; alloca $ run . f</programlisting>
    </para>
   </section>
   <section>
    <title>Lost State</title>
    <para/>
    <para>Let's rewind a bit to our onExceptionError. It uses onException under the surface,
   which has a type signature: <literal>IO a -&gt; IO b -&gt; IO a</literal>. Let me ask you
   something: what happened to the b in the output? Well, it was thoroughly ignored. But that seems
   to cause us a bit of a problem. After all, we store our transformer state information in the
   value of the inner monad. If we ignore it, we're essentially ignoring the monadic side effects as
   well!</para>
    <para>And the answer is that, yes, this does happen with monad-control. Certain functions
   will drop some of the monadic side effects. This is put best by Bas, in the comments on the
   relevant functions:<blockquote>
      <para>Note, any monadic side effects in m of the "release" computation
    will be discarded; it is run only for its side effects in IO.</para>
     </blockquote>In practice, monad-control
   will usually be doing the right thing for you, but you need to be aware that some side effects
   may disappear.</para>
   </section>
   <section>
    <title>More Complicated Cases</title>
    <para/>
    <para>In order to make our tricks work so far, we've needed to have functions that give us full
   access to play around with their values. Sometimes, this isn't the case. Take, for instance:</para>
    <programlisting language="haskell">addMVarFinalizer :: MVar a -&gt; IO () -&gt; IO ()</programlisting>
    <para>In this case, we are required to have no value inside our finalizer function. Intuitively, the
   first thing we should notice is that there will be no way to capture our monadic side effects. So
   how do we get something like this to compile? Well, we need to explicitly tell it to drop all of
   its state-holding
   information:<programlisting language="haskell">addMVarFinalizerError :: MVar a -&gt; ErrorT MyError IO () -&gt; ErrorT MyError IO ()
addMVarFinalizerError mvar f = controlIO $ \run -&gt;
    return $ liftIO $ addMVarFinalizer mvar (run f &gt;&gt; return ())</programlisting>
    </para>
    <para>Another case from the same module
   is:<programlisting language="haskell">modifyMVar :: MVar a -&gt; (a -&gt; IO (a, b)) -&gt; IO b</programlisting>Here,
   we have a restriction on the return type in the second argument: it must be a tuple of the value
   passed to that function and the final return value. Unfortunately, I can't see a way of writing a
   little wrapper around modifyMVar to make it work for ErrorT. Instead, in this case, I copied the
   definition of modifyMVar and modified it:</para>
    <programlisting language="haskell">modifyMVar :: MVar a
           -&gt; (a -&gt; ErrorT MyError IO (a, b))
           -&gt; ErrorT MyError IO b
modifyMVar m io =
  Control.Exception.Control.mask $ \restore -&gt; do
    a      &lt;- liftIO $ takeMVar m
    (a',b) &lt;- restore (io a) `onExceptionError` liftIO (putMVar m a)
    liftIO $ putMVar m a'
    return b</programlisting>
   </section>
  </chapter>
