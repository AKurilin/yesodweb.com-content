<?xml version="1.0" encoding="UTF-8"?><chapter>
   <title>RESTful Content</title>
   <para/>
   <para/>
   <para>One of the stories from the early days of the web is how search engines wiped out entire
            websites. When dynamic web sites were still a new concept, developers didn't appreciate
            the difference between a <literal>GET</literal> and <literal>POST</literal> request. As a
            result, they created pages- accessed with the <literal>GET</literal> method- that would
            delete pages. When search engines started crawling these sites, they could wipe out all
            the content.</para>
   <para>If these web developers had followed the HTTP spec properly, this would not have
            happened. A <literal>GET</literal> request is supposed to cause no side effects
            (you know, like wiping out a site). Recently, there has been a move in web development
            to properly embrace Representational State Transfer, also known as REST. This chapter
            describes the RESTful features in Yesod and how you can use them to create more robust
            web applications.</para>
   <section>
    <title>Request methods</title>
    <para/>
    <para>In many web frameworks, you write one handler function per resource. In Yesod, the default is to have a separate handler function for each <glossterm>request method</glossterm>. The two most common request methods you will deal with in creating web sites are GET and POST. These are the most well-supported methods in HTML, since they are the only ones supported by web forms. However, when creating RESTful APIs, the other methods are very useful.</para>
    <para>Technically speaking, you can create whichever request methods you like, but it is strongly recommended to stick to the ones spelled out in the HTTP spec. The most common of these are:</para>
    <variablelist>
     <varlistentry>
      <term>GET</term>
      <listitem>
       <para>Read-only requests. Assuming no other changes occur on the server, calling a
                        <literal>GET</literal> request multiple times should result in the same
                    response, barring such things as "current time" or randomly assigned
                    results.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>POST</term>
      <listitem>
       <para>A general mutating request. A <literal>POST</literal> request should never be submitted
                    twice by the user. A common example of this would be to transfer funds from one
                    bank account to another.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PUT</term>
      <listitem>
       <para>Create a new resource on the server, or replace an existing one. This method <emphasis>is</emphasis> safe to be called multiple times.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>DELETE</term>
      <listitem>
       <para>Just like it sounds: wipe out a resource on the server. Calling multiple times should be OK.</para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>To a certain extent, this fits in very well with Haskell philosophy: a
                <literal>GET</literal> request is similar to a pure function, which cannot have side
            effects. In practice, your <literal>GET</literal> functions will probably perform
                <literal>IO</literal>, such as reading information from a database, logging user
            actions, and so on.</para>
    <para>See the routing and handlers chapter chapter for more information on the syntax of defining handler functions for each request method.</para>
   </section>
   <section>
    <title>Representations</title>
    <para/>
    <para>Suppose we have a Haskell datatype and value:</para>
    <programlisting language="haskell">data Person = Person { name :: String, age :: Int }
michael = Person "Michael" 25</programlisting>
    <para>We could represent that data as HTML:</para>
    <programlisting>&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Name&lt;/th&gt;
        &lt;td&gt;Michael&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th&gt;Age&lt;/th&gt;
        &lt;td&gt;25&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</programlisting>
    <para>or we could represent it as JSON:</para>
    <programlisting>{"name":"Michael","age":25}</programlisting>
    <para>or as XML:</para>
    <programlisting>&lt;person&gt;
    &lt;name&gt;Michael&lt;/name&gt;
    &lt;age&gt;25&lt;/age&gt;
&lt;/person&gt;</programlisting>
    <para>Often times, web applications will use a different URL to get each of these
            representations; perhaps <literal>/person/michael.html</literal>,
                <literal>/person/michael.json</literal>, etc. Yesod follows the RESTful principle of a
            single URL for each <glossterm>resource</glossterm>. So in Yesod, all of these would be
            accessed from <literal>/person/michael</literal>.</para>
    <para>Then the question becomes how do we determine <emphasis>which</emphasis> representation to
            serve. The answer is the HTTP <literal>Accept</literal> header: it gives a prioritized
            list of content types the client is expecting. Yesod will automatically determine which
            representation to serve based upon this header.</para>
    <para>Let's make that last sentence a bit more concrete with some code:</para>
    <programlisting language="haskell">type ChooseRep = [ContentType] -&gt; IO (ContentType, Content)
class HasReps a where
    chooseRep :: a -&gt; ChooseRep</programlisting>
    <para>The <literal>chooseRep</literal> function takes two arguments: the value we are getting
            representations for, and a list of content types that the client will accept. We
            determine this by reading the <literal>Accept</literal> request header.
                <literal>chooseRep</literal> returns a tuple containing the content type of our
            response and the actual content.</para>
    <para>This typeclass is the core of Yesod's RESTful approach to representations. Every
            handler function must return an instance of <literal>HasReps</literal>. When
            Yesod generates the dispatch function, it automatically applies
                <literal>chooseRep</literal> to each handler, essentially giving all functions the
            type <literal>Handler ChooseRep</literal>. After running the <literal>Handler</literal> and
            obtaining the <literal>ChooseRep</literal> result, it is applied to the list of content
            types parsed from the <literal>Accept</literal> header.</para>
    <para>Yesod provides a number of instances of <literal>HasReps</literal> out of the
            box. When we use <literal>defaultLayout</literal>, for example, the return type
            is <literal>RepHtml</literal>, which looks like:</para>
    <programlisting language="haskell">newtype RepHtml = RepHtml Content
instance HasReps RepHtml where
    chooseRep (RepHtml content) _ = return ("text/html", content)</programlisting>
    <para>Notice that we ignore entirely the list of expected content types. A number of the
            built in representations (<literal>RepHtml</literal>, <literal>RepPlain</literal>,
                <literal>RepJson</literal>, <literal>RepXml</literal>) in fact only support a single
            representation, and therefore what the client requests in the <literal>Accept</literal>
            header is irrelevant.</para>
    <section>
     <title>RepHtmlJson</title>
     <para/>
     <para>An example to the contrary is <literal>RepHtmlJson</literal>, which provides either an
            HTML or JSON representation. This instance helps greatly in programming AJAX
            applications that degrade nicely. Here is an example that returns either HTML or JSON
            data, depending on what the client wants.</para>
     <programlisting language="haskell">{-# LANGUAGE QuasiQuotes, TypeFamilies, OverloadedStrings #-}
{-# LANGUAGE MultiParamTypeClasses, TemplateHaskell #-}
import Yesod
data R = R
mkYesod "R" [parseRoutes|
/ RootR GET
/#String NameR GET
|]
instance Yesod R

getRootR = defaultLayout $ do
    setTitle "Homepage"
    addScriptRemote "http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js"
    toWidget [julius|
$(function(){
    $("#ajax a").click(function(){
        jQuery.getJSON($(this).attr("href"), function(o){
            $("div").text(o.name);
        });
        return false;
    });
});
|]
    let names = words "Larry Moe Curly"
    [whamlet|
&lt;h2&gt;AJAX Version
&lt;div #results&gt;
    AJAX results will be placed here when you click #
    the names below.
&lt;ul #ajax&gt;
    $forall name &lt;- names
        &lt;li&gt;
            &lt;a href=@{NameR name}&gt;#{name}

&lt;h2&gt;HTML Version
&lt;p&gt;
    Clicking the names below will redirect the page #
    to an HTML version.
&lt;ul #html&gt;
    $forall name &lt;- names
        &lt;li&gt;
            &lt;a href=@{NameR name}&gt;#{name}

|]

getNameR name = do
    let widget = do
            setTitle $ toHtml name
            [whamlet|Looks like you have Javascript off. Name: #{name}|]
    let json = object ["name" .= name]
    defaultLayoutJson widget json

main = warpDebug 4000 R</programlisting>
     <para>Our <literal>getRootR</literal> handler creates a page with three links and some
            Javascript which intercept clicks on the links and performs asynchronous requests. If
            the user has Javascript enabled, clicking on the link will cause a request to be sent
            with an <literal>Accept</literal> header of <literal>application/json</literal>. In that case, <literal>getNameR</literal> will
            return the JSON representation instead.</para>
     <para>If the user disables Javascript, clicking on the link will send the user to the
            appropriate URL. A web browser places priority on an HTML representation of the data,
            and therefore the page defined by the widget will be returned.</para>
     <para>We can of course extend this to work with XML, Atom feeds, or even binary
            representations of the data. A fun exercise could be writing a web application that
            serves data simply using the default <literal>Show</literal> instances of datatypes, and
            then writing a web client that parses the results using the default
                <literal>Read</literal> instances.</para>
     <note>
      <para>You might be concerned about efficiency here. Doesn't this approach mean we have to
            generate both an HTML and JSON response for each request? Thanks to laziness, that's not
            the case. In <literal>getNameR</literal>, neither <literal>widget</literal> nor
                <literal>json</literal> will be evaluated until the appropriate response type has been
            selected, and therefore only one of them will ever be run.</para>
     </note>
    </section>
    <section>
     <title>News Feeds</title>
     <para/>
     <para>A great, practical example of multiple representations if the <function>yesod-newsfeed</function> package. There are two major formats for news feeds on the web: RSS and Atom. They contain almost exactly the same information, but are just packaged up differently.</para>
     <para>The <literal>yesod-newsfeed</literal> package defines a <literal>Feed</literal>
            datatype which contains information like title, description, and last updated time. It
            then provides two separate sets of functions for displaying this data: one for RSS, one
            for Atom. They each define their own representation datatypes:</para>
     <programlisting language="haskell">newtype RepAtom = RepAtom Content
instance HasReps RepAtom where
    chooseRep (RepAtom c) _ = return (typeAtom, c)
newtype RepRss = RepRss Content
instance HasReps RepRss where
    chooseRep (RepRss c) _ = return (typeRss, c)</programlisting>
     <para>But there's a third module which defines another datatype:</para>
     <programlisting language="haskell">data RepAtomRss = RepAtomRss RepAtom RepRss
instance HasReps RepAtomRss where
    chooseRep (RepAtomRss (RepAtom a) (RepRss r)) = chooseRep
        [ (typeAtom, a)
        , (typeRss, r)
        ]</programlisting>
     <para>This datatype will automatically serve whichever representation the client prefers, defaulting to Atom. If a client connects that only understands RSS, assuming it provides the correct HTTP headers, Yesod will provide RSS output.</para>
    </section>
   </section>
   <section>
    <title>Other request headers</title>
    <para/>
    <para>There are a great deal of other request headers available. Some of them only affect the
            transfer of data between the server and client, and should not affect the application at
            all. For example, <literal>Accept-Encoding</literal> informs the server which compression
            schemes the client understands, and <literal>Host</literal> informs the server which
            virtual host to serve up.</para>
    <para>Other headers <emphasis>do</emphasis> affect the application, but are automatically read by
            Yesod. For example, the <literal>Accept-Language</literal> header specifies which human
            language (English, Spanish, German, Swiss-German) the client prefers. See the i18n chapter
            for details on how this header is used.</para>
   </section>
   <section>
    <title>Stateless</title>
    <para/>
    <para>I've saved this section for the last, not because it is less important, but rather because there are no specific features in Yesod to enforce this.</para>
    <para>HTTP is a stateless protocol: each request is to be seen as the beginning of a conversation. This means, for instance, it doesn't matter to the server if you requested five pages previously, it will treat your sixth request as if it's your first one.</para>
    <para>On the other hand, some features on websites won't work without some kind of state. For example, how can you implement a shopping cart without saving information about items in between requests?</para>
    <para>The solution to this is cookies, and built on top of this, sessions. We have a whole section addressing the sessions features in Yesod. However, I cannot stress enough that this should be used sparingly.</para>
    <para>Let me give you an example. There's a popular bug tracking system that I deal with on a daily basis which horribly abuses sessions. There's a little drop-down on every page to select the current project. Seems harmless, right? What that dropdown does is set the current project in your session.</para>
    <para>The result of all this is that clicking on the "view issues" link is entirely dependent on the last project you selected. There's no way to create a bookmark to your "Yesod" issues and a separate link for your "Hamlet" issues.</para>
    <para>The proper RESTful approach to this is to have one resource for all of the Yesod issues and a separate one for all the Hamlet issues. In Yesod, this is easily done with a route definition like:</para>
    <programlisting>/ ProjectsR GET
/projects/#ProjectID ProjectIssuesR GET
/issues/#IssueID IssueR GET</programlisting>
    <para>Be nice to your users: proper stateless architecture means that basic features like bookmarks, permalinks and the back/forward button will always work.</para>
   </section>
   <section>
    <title>Summary</title>
    <para/>
    <para>Yesod adheres to the following tenets of REST:</para>
    <itemizedlist>
     <listitem>
      <para>Use the correct request method.</para>
     </listitem>
     <listitem>
      <para>Each resource should have precisely one URL.</para>
     </listitem>
     <listitem>
      <para>Allow multiple representations of data on the same URL.</para>
     </listitem>
     <listitem>
      <para>Inspect request headers to determine extra information about what the client wants.</para>
     </listitem>
    </itemizedlist>
    <para>This makes it easy to use Yesod not just for building websites, but for building APIs. In fact, using techniques such as RepHtmlJson, you can serve both a user-friendly, HTML page and a machine-friendly, JSON page from the same URL.</para>
   </section>
  </chapter>