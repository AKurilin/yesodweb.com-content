<?xml version="1.0" encoding="UTF-8"?><chapter>
   <title>Widgets</title>
   <para/>
   <para/>
   <para>One of the challenges in web development is that we have to coordinate three different client-side technologies: HTML, CSS and Javascript. Worse still, we have to place these components in different locations on the page: CSS in a style tag in the head, Javascript in a script tag in the head, and HTML in the body. And never mind if you want to put your CSS and Javascript in separate files!</para>
   <para>In practice, this works out fairly nicely when building a single page, because we can
            separate our structure (HTML), style (CSS) and logic (Javascript). But when we want to
            build modular pieces of code that can be easily composed, it can be a headache to
            coordinate all three pieces separately. Widgets are Yesod's solution to the problem.
            They also help with the issue of including libraries, such as jQuery, one time only.</para>
   <para>Our four template languages- Hamlet, Cassius, Lucius and Julius- provide the raw tools for constructing your output. Widgets provide the glue that allows them to work together seamlessly.</para>
   <section>
    <title>Synopsis</title>
    <para/>
    <programlisting language="haskell">getRootR = defaultLayout $ do
    setTitle "My Page Title"
    toWidget [lucius| h1 { color: green; } |]
    addScriptRemote "https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"
    toWidget [julius|
$(function() {
    $("h1").click(function(){ alert("You clicked on the heading!"); });
});
|]
    toWidgetHead [hamlet| &lt;meta name=keywords content="some sample keywords"&gt;|]
    toWidget [hamlet| &lt;h1&gt;Here's one way of including content |]
    [whamlet| &lt;h2&gt;Here's another |]
    toWidgetBody [julius| alert("This is included in the body itself"); |]
</programlisting>
    <para>This produces the following HTML (indentation added):</para>
    <programlisting>&lt;!DOCTYPE html&gt; 
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;My Page Title&lt;/title&gt;
        &lt;style&gt;h1 { color : green }&lt;/style&gt;
        &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"&gt;&lt;/script&gt;
        &lt;script&gt;
$(function() {
    $("h1").click(function(){ alert("You clicked on the heading!"); });
});
&lt;/script&gt;
        &lt;meta name="keywords" content="some sample keywords"&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Here's one way of including content &lt;/h1&gt;
        &lt;h2&gt;Here's another &lt;/h2&gt;
        &lt;script&gt; alert("This is included in the body itself"); &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</programlisting>
   </section>
   <section>
    <title>What's in a Widget?</title>
    <para/>
    <para>At a very superficial level, an HTML document is just a
            bunch of nested tags. This is the approach most HTML generation
            tools take: you simply define hierarchies of tags and are done with
            it. But let's imagine that I want to write a component of a page
            for displaying the navbar. I want this to be "plug and play": I
            simply call the function at the right time, and the navbar is
            inserted at the correct point in the hierarchy.</para>
    <para>This is where our superficial HTML generation breaks down. Our navbar likely consists of
            some CSS and JavaScript in addition to HTML. By the time we call the navbar function, we
            have already rendered the <literal>&lt;head&gt;</literal> tag, so it is too late to add a
            new <literal>&lt;style&gt;</literal> tag for our CSS declarations. Under normal
            strategies, we would need to break up our navbar function into three parts: HTML, CSS
            and JavaScript, and make sure that we always call all three pieces.</para>
    <para>Widgets take a different approach. Instead of viewing an
            HTML document as a monolithic tree of tags, widgets see a number of
            distinct components in the page. In particular:</para>
    <itemizedlist>
     <listitem>
      <para>The title</para>
     </listitem>
     <listitem>
      <para>External stylesheets</para>
     </listitem>
     <listitem>
      <para>External Javascript</para>
     </listitem>
     <listitem>
      <para>CSS declarations</para>
     </listitem>
     <listitem>
      <para>Javascript code</para>
     </listitem>
     <listitem>
      <para>Arbitrary <literal>&lt;head&gt;</literal> content</para>
     </listitem>
     <listitem>
      <para>Arbitrary <literal>&lt;body&gt;</literal> content</para>
     </listitem>
    </itemizedlist>
    <para>Different components have different semantics. For example,
            there can only be one title, but there can be multiple external
            scripts and stylesheets. However, those external scripts and
            stylesheets should only be included once. Arbitrary head and body
            content, on the other hand, has no limitation (someone may want to
            have five lorem ipsum blocks after all).</para>
    <para>The job of a widget is to hold onto these disparate components and apply proper logic
            for combining different widgets together. This consists of things like taking the first
            title set and ignoring others, filtering duplicates from the list of external scripts
            and stylesheets, and concatenating head and body content.</para>
   </section>
   <section>
    <title>Constructing Widgets</title>
    <para/>
    <para>In order to use widgets, you'll obviously need to be able to get your hands on them.
   The most common way will be via the <literal>ToWidget</literal> typeclass, and its
    <literal>toWidget</literal> method. This allows you to convert your Shakespearean templates
   directly to a <literal>Widget</literal>: Hamlet code will appear in the body, Julius scripts inside
   a <literal>&lt;script&gt;</literal> tag in the head, and Cassius and Lucius in a
    <literal>&lt;style&gt;</literal> tag.</para>
    <note>
     <para>You can actually override the default behavior and have the script and style code
   appear in a separate file. The scaffolded site provides this for you automatically. Additionally,
   we'll see in the Yesod typeclass chapter how to turn on asynchronous script loading, which
   will place your script content at the end of the body.</para>
    </note>
    <para>But what if you want to add some <literal>&lt;meta&gt;</literal> tags, which need to
   appear in the head? Or if you want some Javascript to appear in the body instead of the head? For
   these purposes, Yesod provides two additional type classes: <literal>ToWidgetHead</literal> and
    <literal>ToWidgetBody</literal>. These work exactly as they seem they should.</para>
    <para>In addition, there are a number of other functions for creating specific kinds of Widgets:</para>
    <variablelist>
     <varlistentry>
      <term>setTitle</term>
      <listitem>
       <para>Turns some HTML into the page title.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>addCassiusMedia, addLuciusMedia</term>
      <listitem>
       <para>Works the same as toWidget, but takes an additional parameter to indicate what kind of media
     this applies to. Useful for creating print stylesheets, for instance.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>addStylesheet</term>
      <listitem>
       <para>Adds a reference, via a <literal>&lt;link&gt;</literal> tag, to an external
     stylesheet. Takes a type-safe URL.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>addStylesheetRemote</term>
      <listitem>
       <para>Same as <literal>addStylesheet</literal>, but takes a normal URL. Useful for
     referring to files hosted on a CDN, like Google's jQuery UI CSS files.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>addScript</term>
      <listitem>
       <para>Adds a reference, via a <literal>&lt;script&gt;</literal> tag, to an external script.
     Takes a type-safe URL.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>addScriptRemote</term>
      <listitem>
       <para>Same as <literal>addScript</literal>, but takes a normal URL. Useful for referring to
     files hosted on a CDN, like Google's jQuery.</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
   <section>
    <title>Combining Widgets</title>
    <para/>
    <para>The whole idea of widgets is to increase composability. You can take these individual
   pieces of HTML, CSS and Javascript, combine them together into something more complicated, and
   then combine these larger entities into complete pages. This all works naturally through the
    <literal>Monad</literal> instance of <literal>Widget</literal>, meaning you can use do-notation to
   compose pieces together.</para>
    <figure xml:id="combining-widgets-x2">
     <title>Combining Widgets</title>
     <programlisting language="haskell">myWidget1 = do
    toWidget [hamlet|&lt;h1&gt;My Title|]
    toWidget [lucius|h1 { color: green } |]

myWidget2 = do
    setTitle "My Page Title"
    addScriptRemote "http://www.example.com/script.js"

myWidget = do
    myWidget1
    myWidget2

-- or, if you want
myWidget' = myWidget1 &gt;&gt; myWidget2</programlisting>
    </figure>
    <note>
     <para>If you're so inclined, there's also a <literal>Monoid</literal> instance of
    <literal>Widget</literal>, meaning you can use <literal>mconcat</literal> or a
    <literal>Writer</literal> monad to build things up. In my experience, it's easiest and most
   natural to just use do-notation.</para>
    </note>
   </section>
   <section>
    <title>Generate IDs</title>
    <para/>
    <para>If we're really going for true code reuse here, we're eventually going to run into name
   conflicts. Let's say that there are two helper libraries that both use the class name "foo" to
   affect styling. We want to avoid such a possibility. Therefore, we have the
    <literal>newIdent</literal> function. This function automatically generates a word that is unique
   for this handler.</para>
    <figure xml:id="generate-ids-x2">
     <title>Using newIdent</title>
     <programlisting language="haskell">getRootR = defaultLayout $ do
    headerClass &lt;- lift newIdent
    toWidget [hamlet|&lt;h1 .#{headerClass}&gt;My Header|]
    toWidget [lucius| .#{headerClass} { color: green; } |]
</programlisting>
    </figure>
    <note>
     <para>You might be wondering: what does lift mean? A <literal>Widget</literal> is a monad
   transformer, sitting on top of a <literal>Handler</literal>. <literal>newIdent</literal> is a
   function of a <literal>Handler</literal>, so we need to "lift" the function from the
    <literal>Handler</literal> layer to the <literal>Widget</literal> layer to use it. We can actually
   use this same approach to perform complex actions, like database queries, from within a widget.
   We'll cover that when we discuss Yesod's monads.</para>
    </note>
   </section>
   <section>
    <title>whamlet</title>
    <para/>
    <para>Let's say you've got a fairly standard Hamlet template, that embeds another Hamlet template to
   represent the footer:</para>
    <programlisting language="haskell">page = [hamlet|
&lt;p&gt;This is my page. I hope you enjoyed it.
^{footer}
|]

footer = [hamlet|
&lt;footer&gt;
    &lt;p&gt;That's all folks!
|]</programlisting>
    <para>That works fine if the footer is plain old HTML, but what if we want to add some style? Well,
   we can easily spice up the footer by turning it into a Widget:</para>
    <programlisting language="haskell">footer = do
    toWidget [lucius| footer { font-weight: bold; text-align: center } |]
    toWidget [hamlet|
&lt;footer&gt;
    &lt;p&gt;That's all folks!
|]</programlisting>
    <para>But now we've got a problem: a Hamlet template can only embed another Hamlet template;
      it knows nothing about a Widget. This is where <literal>whamlet</literal> comes in. It takes
      exactly the same syntax as normal Hamlet, and variable (#{...}) and URL (@{...}) interpolation
      are unchanged. But embedding (^{...}) takes a <literal>Widget</literal>, and the final result is
      a <literal>Widget</literal>. To use it, we can just do:</para>
    <programlisting language="haskell">page = [whamlet|
&lt;p&gt;This is my page. I hope you enjoyed it.
^{footer}
|]</programlisting>
    <para>There is also <literal>whamletFile</literal>, if you would prefer to keep your template
      in a separate file.</para>
    <note>
     <para>The scaffolded site has an even more convenient function, <literal>widgetFile</literal>,
      which will also include your Lucius, Cassius, and Julius files automatically. We'll cover that
      in the scaffolding chapter.</para>
    </note>
    <section>
     <title>Types</title>
     <para/>
     <para>You may have noticed that I've been avoiding type signatures so far. That's because
   there's a little bit of a complication involved here. At the most basic level, all you need to
   know is that there's a type synonym called <literal>Widget</literal> which you will almost always
   use. The technical details follow, but don't worry if it's a little hazy.</para>
     <para>There isn't actually a <literal>Widget</literal> type defined in the Yesod libraries, since the
   exact meaning of it changes between sites. Instead, we have a more general type <literal>GWidget
    sub master a</literal>. The first two parameters give the sub and master foundation types,
   respectively. The final parameter is the contained value, just like any <literal>Monad</literal>
   has.</para>
     <para>So what's the deal with that sub/master stuff? Well, when you're writing some reusable code,
   such as a CRUD application, you can write it as a subsite that can be embedded within any other
   Yesod application. In such a case, we need to keep track of information for both the sub and
   master sites. The simplest example is for the type-safe URLs: Yesod needs to know how to take a
   route for your CRUD subsite and turn it into a route for the master site so that it can be
   properly rendered.</para>
     <para>However, that sub/master distinction only ever matters when you're interacting with subsites.
   When you're writing your standard response code, you're dealing with just your application, and
   so the sub and master sites will be the same. Since this is the most common case, the scaffolded
   site declares a type synonym to help you out. Let's say your foundation type is MyCoolApp, it
   will define <literal>type Widget = GWidget MyCoolApp MyCoolApp ()</literal>. Therefore, we can get
   some very user-friendly type signatures on our widgets:</para>
     <programlisting language="haskell">footer :: Widget
footer = do
    toWidget [lucius| footer { font-weight: bold; text-align: center } |]
    toWidget [hamlet|
&lt;footer&gt;
    &lt;p&gt;That's all folks!
|]

page :: Widget
page = [whamlet|
&lt;p&gt;This is my page. I hope you enjoyed it.
^{footer}
|]</programlisting>
     <para>If you've been paying close attention, you might be confused. We used <literal>lift</literal> on <literal>Widget</literal> in the ID generation example above, but
    <literal>GWidget</literal> isn't actually a monad transformer. What's going on here?
   Well, in older versions of Yesod, it <emphasis>was</emphasis> a transformer around the <literal>Handler</literal> type. Unfortunately, this led to difficult-to-parse error messages.
   As a result, <literal>GWidget</literal> is now a <literal>newtype</literal>
   wrapper that hides away its monad-transformer essence. But we still want to be able to <literal>lift</literal> functions from the inner <literal>Handler</literal> monad.</para>
     <para>To solve this, Yesod provides an alternate, more general <literal>lift</literal> function that
   works for both standard <literal>MonadTrans</literal> instances, and special
    <literal>newtype</literal> wrappers like <literal>GWidget</literal>. As a result, you can pretend
   like <literal>GWidget</literal> is a standard transformer, while still getting to keep your nice
   error message.</para>
     <para>One last point: just like we have the breakdown between <literal>Widget</literal> and
    <literal>GWidget</literal>, we have a similar breakdown between <literal>Handler</literal> and
    <literal>GHandler</literal>.</para>
    </section>
   </section>
   <section>
    <title>Using Widgets</title>
    <para/>
    <para>It's all well and good that we have these beautiful Widget datatypes, but how exactly
            do we turn them into something the user can interact with? The most commonly used
            function is <literal>defaultLayout</literal>, which essentially has the type signature
                <literal>Widget -&gt; Handler RepHtml</literal>. (I say "essentially" because
            of the whole <literal>GHandler</literal> issue.) <literal>RepHtml</literal> is a datatype
            containing some raw HTML output ready to be sent over the wire.</para>
    <para>
     <literal>defaultLayout</literal> is actually a typeclass method, which can be overridden
            for each application. This is how Yesod apps are themed. So we're still left with the
            question: when we're inside <literal>defaultLayout</literal>, how do we unwrap a
                <literal>Widget</literal>? The answer is <literal>widgetToPageContent</literal>. Let's
            look at some (simplified) types:</para>
    <programlisting language="haskell">widgetToPageContent :: Widget -&gt; Handler (PageContent url)
data PageContent url = PageContent
    { pageTitle :: Html
    , pageHead :: HtmlUrl url
    , pageBody :: HtmlUrl url
    }</programlisting>
    <para>This is getting closer to what we need. We now have direct access to the HTML making up
            the head and body, as well as the title. At this point, we can use Hamlet to combine
            them all together into a single document, along with our site layout, and we use
                <literal>hamletToRepHtml</literal> to render that Hamlet result into actual HTML
            that's ready to be shown to the user. The next figure demonstrates this process.</para>
    <figure xml:id="using-widgets-x6">
     <title>Using widgetToPageContent</title>
     <programlisting language="haskell">myLayout :: GWidget s MyApp () -&gt; GHandler s MyApp RepHtml
myLayout widget = do
    pc &lt;- widgetToPageContent widget
    hamletToRepHtml [hamlet|
$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{pageTitle pc}
        &lt;meta charset=utf-8&gt;
        &lt;style&gt;body { font-family: verdana }
        ^{pageHead pc}
    &lt;body&gt;
        &lt;article&gt;
            ^{pageBody pc}
|]

instance Yesod MyApp where
    defaultLayout = myLayout
</programlisting>
    </figure>
    <note>
     <para>You may have noticed that we used <literal>GWidget</literal> and
                <literal>GHandler</literal> instead of <literal>Widget</literal> and
                <literal>Handler</literal>. That's because <literal>defaultLayout</literal> is a method
            that can be called by subsites to ensure that they get the same styling as the master
            site. Therefore, we need to keep our types flexible here.</para>
    </note>
    <para>This is all well and good, but there's one thing that bothers me: that
                <literal>style</literal> tag. There are a few problems with it:</para>
    <itemizedlist>
     <listitem>
      <para>Unlike Lucius or Cassius, it doesn't get compile-time checked for correctness.</para>
     </listitem>
     <listitem>
      <para>Granted that the current example is very simple, but in something more complicated we could
    get into character escaping issues.</para>
     </listitem>
     <listitem>
      <para>We'll now have two style tags instead of one: the one produced by
                    <literal>myLayout</literal>, and the one generated in the
                    <literal>pageHead</literal> based on the styles set in the widget.</para>
     </listitem>
    </itemizedlist>
    <para>We have one more trick in our bag to address this: we apply some last-minute
            adjustments to the widget itself before calling <literal>widgetToPageContent</literal>. It's actually very easy to do: we just use
            do-notation again, as in Last-Minute Widget Adjustment.</para>
    <figure xml:id="using-widgets-last-minute-widget-adjustment">
     <title>Last-Minute Widget Adjustment</title>
     <programlisting language="haskell">myLayout :: GWidget s MyApp () -&gt; GHandler s MyApp RepHtml
myLayout widget = do
    pc &lt;- widgetToPageContent $ do
        widget
        toWidget [lucius| body { font-family: verdana } |]
    hamletToRepHtml [hamlet|
$doctype 5
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;#{pageTitle pc}
        &lt;meta charset=utf-8&gt;
        ^{pageHead pc}
    &lt;body&gt;
        &lt;article&gt;
            ^{pageBody pc}
|]
</programlisting>
    </figure>
   </section>
   <section>
    <title>Summary</title>
    <para/>
    <para>The basic building block of each page is a widget. Individual snippets of HTML, CSS, and
   Javascript can be turned into widgets via the polymorphic <literal>toWidget</literal> function.
   Using do-notation, you can combine these individual widgets into larger widgets, eventually
   containing all the content of your page.</para>
    <para>Unwrapping these widgets is usually performed within the defaultLayout function, which can be
   used to apply a unified look-and-feel to all your pages.</para>
   </section>
  </chapter>