<?xml version="1.0" encoding="UTF-8"?><chapter>
   <title>JSON Web Service</title>
   <para/>
   <para/>
   <para>Let's create a very simple web service: it takes a JSON request and returns a JSON
            response. We're going to write the server in WAI/Warp, and the client in <function>http-conduit</function>. We'll be using <function>aeson</function> for
            JSON parsing and rendering. We could also write the server in Yesod itself, but for such
            a simple example, the extra features of Yesod don't add much.</para>
   <section>
    <title>Server</title>
    <para/>
    <para>WAI uses the <function>conduit</function> package to handle streaming request
            bodies, and efficiently generates responses using <function>blaze-builder</function>. <function>aeson</function> uses <function>attoparsec</function> for parsing; by using <function>attoparsec-conduit</function> we get easy interoperability with WAI. This plays out
            as:</para>
    <programlisting language="haskell">{-# LANGUAGE OverloadedStrings #-}
import Network.Wai (Response, responseLBS, Application, requestBody)
import Network.HTTP.Types (status200, status400)
import Network.Wai.Handler.Warp (run)
import Data.Aeson.Parser (json)
import Data.Conduit.Attoparsec (sinkParser)
import Control.Monad.IO.Class (liftIO)
import Data.Aeson (Value, encode, object, (.=))
import Control.Exception (SomeException)
import Data.ByteString (ByteString)
import Data.Conduit (ResourceT, ($$))
import Control.Exception.Lifted (handle)

main :: IO ()
main = run 3000 app

app :: Application
app req = handle invalidJson $ do
    value &lt;- requestBody req $$ sinkParser json
    newValue &lt;- liftIO $ modValue value
    return $ responseLBS
        status200
        [("Content-Type", "application/json")]
        $ encode newValue

invalidJson :: SomeException -&gt; ResourceT IO Response
invalidJson ex = return $ responseLBS
    status400
    [("Content-Type", "application/json")]
    $ encode $ object
        [ ("message" .= show ex)
        ]

-- Application-specific logic would go here.
modValue :: Value -&gt; IO Value
modValue = return</programlisting>
   </section>
   <section>
    <title>Client</title>
    <para/>
    <para>
     <function>http-conduit</function> was written as a companion to WAI. It too uses
    <literal>conduit</literal> and <literal>blaze-builder</literal> pervasively, meaning we once again
   get easy interop with <literal>aeson</literal>. A few extra comments for those not familiar with
    <literal>http-conduit</literal>:</para>
    <itemizedlist>
     <listitem>
      <para>A <literal>Manager</literal> is present to keep track of open connections, so
    that multiple requests to the same server use the same connection. You usually want to use the
     <literal>withManager</literal> function to create and clean up this
     <literal>Manager</literal>, since it is exception safe.</para>
     </listitem>
     <listitem>
      <para>We need to know the size of our request body, which can't be determined directly from
    a <literal>Builder</literal>. Instead, we convert the <literal>Builder</literal> into a lazy
     <literal>ByteString</literal> and take the size from there.</para>
     </listitem>
     <listitem>
      <para>There are a number of different functions for initiating a request. We use
     <literal>http</literal>, which allows us to directly access the data stream. There are other
    higher level functions (such as <literal>httpLbs</literal>) that let you ignore the issues of
    sources and get the entire body directly.</para>
     </listitem>
    </itemizedlist>
    <programlisting language="haskell">{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Conduit
    ( http, parseUrl, withManager, RequestBody (RequestBodyLBS)
    , requestBody, method, Response (..)
    )
import Data.Aeson (Value (Object, String))
import Data.Aeson.Parser (json)
import Data.Conduit (($$))
import Data.Conduit.Attoparsec (sinkParser)
import Control.Monad.IO.Class (liftIO)
import Data.Aeson (encode, (.=), object)

main :: IO ()
main = withManager $ \manager -&gt; do
    value &lt;- liftIO makeValue
    -- We need to know the size of the request body, so we convert to a
    -- ByteString
    let valueBS = encode value
    req' &lt;- liftIO $ parseUrl "http://localhost:3000/"
    let req = req' { method = "POST", requestBody = RequestBodyLBS valueBS }
    Response status version headers body &lt;- http req manager
    resValue &lt;- body $$ sinkParser json
    liftIO $ handleResponse resValue

-- Application-specific function to make the request value
makeValue :: IO Value
makeValue = return $ object
    [ ("foo" .= ("bar" :: String))
    ]

-- Application-specific function to handle the response from the server
handleResponse :: Value -&gt; IO ()
handleResponse = print</programlisting>
   </section>
  </chapter>